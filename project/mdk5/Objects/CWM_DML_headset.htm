<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CWM_DML_headset.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CWM_DML_headset.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Apr 19 16:17:14 2022
<BR><P>
<H3>Maximum Stack Usage =       1032 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
aif_headset_interface_process &rArr; cwm_headset_interface &rArr; ActivateHeadOrien &rArr; cwm_headset_orien &rArr; cwm_sensor_fusion &rArr; fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[13b]">__embedded_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13b]">__embedded_string</a><BR>
 <LI><a href="#[151]">cwm_quick_sort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[151]">cwm_quick_sort</a><BR>
 <LI><a href="#[1bf]">__embedded_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bf]">__embedded_string</a><BR>
 <LI><a href="#[1f5]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f6]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[28e]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28e]">buffer_add</a><BR>
 <LI><a href="#[1be]">__embedded_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">__embedded_string</a><BR>
 <LI><a href="#[368]">write_mclk_reg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35b]">inv_imu_switch_on_mclk</a><BR>
 <LI><a href="#[35c]">inv_imu_switch_off_mclk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34d]">inv_imu_write_reg</a><BR>
 <LI><a href="#[35b]">inv_imu_switch_on_mclk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34c]">inv_imu_read_reg</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[84]">CWM_AP_SensorListen</a> from main.o(i.CWM_AP_SensorListen) referenced from main.o(i.main)
 <LI><a href="#[8e]">CWM_OS_GetTimeNs</a> from board_nordic.o(i.CWM_OS_GetTimeNs) referenced from main.o(.constdata)
 <LI><a href="#[8d]">CWM_OS_dbgOutput</a> from board_nordic.o(i.CWM_OS_dbgOutput) referenced from main.o(.constdata)
 <LI><a href="#[90]">CWM_OS_i2cRead</a> from board_nordic.o(i.CWM_OS_i2cRead) referenced from main.o(.constdata)
 <LI><a href="#[91]">CWM_OS_i2cWrite</a> from board_nordic.o(i.CWM_OS_i2cWrite) referenced from main.o(.constdata)
 <LI><a href="#[8f]">CWM_OS_uSleep</a> from board_nordic.o(i.CWM_OS_uSleep) referenced from main.o(.constdata)
 <LI><a href="#[9]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[ad]">DmlDrv_Register_bosch_bmi160</a> from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160) referenced from dml_drv_all_entry_list.o(.constdata)
 <LI><a href="#[ae]">DmlDrv_Register_bosch_bmi270</a> from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270) referenced from dml_drv_all_entry_list.o(.constdata)
 <LI><a href="#[af]">DmlDrv_Register_bosch_bmm150</a> from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150) referenced from dml_drv_all_entry_list.o(.constdata)
 <LI><a href="#[b2]">DmlDrv_Register_st_lsm6dsl</a> from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl) referenced from dml_drv_all_entry_list.o(.constdata)
 <LI><a href="#[b1]">DmlDrv_Register_st_lsm6dsox</a> from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox) referenced from dml_drv_all_entry_list.o(.constdata)
 <LI><a href="#[b0]">DmlDrv_Register_tdk_icm42607c</a> from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c) referenced from dml_drv_all_entry_list.o(.constdata)
 <LI><a href="#[44]">DmlDrv_UnRegister</a> from dml_drv_bosch_bmi160.o(i.DmlDrv_UnRegister) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[4b]">DmlDrv_UnRegister</a> from dml_drv_bosch_bmi270.o(i.DmlDrv_UnRegister) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[52]">DmlDrv_UnRegister</a> from dml_drv_bosch_bmm150.o(i.DmlDrv_UnRegister) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[59]">DmlDrv_UnRegister</a> from dml_drv_st_lsm6dsl.o(i.DmlDrv_UnRegister) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[60]">DmlDrv_UnRegister</a> from dml_drv_st_lsm6dsox.o(i.DmlDrv_UnRegister) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[67]">DmlDrv_UnRegister</a> from dml_drv_tdk_icm42607c.o(i.DmlDrv_UnRegister) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[1a]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3c]">LogMaskInit</a> from sal_adv_apis.o(i.LogMaskInit) referenced from sal_adv_apis.o(i.CWM_LibPostInit)
 <LI><a href="#[3d]">LogMaskInit</a> from common_prepare.o(i.LogMaskInit) referenced from common_prepare.o(i.CWM_LibPostInit_common)
 <LI><a href="#[2a]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[5]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">RTC0_IRQHandler</a> from nrfx_rtc.o(i.RTC0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from nrfx_twim.o(.constdata)
 <LI><a href="#[10]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3b]">SensorListen</a> from dml_core.o(i.SensorListen) referenced from dml_core.o(i.CWM_Dml_LibInit)
 <LI><a href="#[3a]">SettingControl</a> from dml_core.o(i.SettingControl) referenced from dml_core.o(i.CWM_Dml_LibInit)
 <LI><a href="#[b]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[18]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from nrfx_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[39]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[6f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[6f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[70]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[42]">agLogout</a> from sal_adv_apis.o(i.agLogout) referenced from sal_adv_apis.o(i.CWM_SettingControl_common)
 <LI><a href="#[a9]">aif_absolute_static_init</a> from aif_absolute_static.o(i.aif_absolute_static_init) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[ac]">aif_absolute_static_process</a> from aif_absolute_static.o(i.aif_absolute_static_process) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[ab]">aif_absolute_static_sensorEnable</a> from aif_absolute_static.o(i.aif_absolute_static_sensorEnable) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[aa]">aif_absolute_static_settingControl</a> from aif_absolute_static.o(i.aif_absolute_static_settingControl) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a1]">aif_headset_interface_init</a> from aif_headset_interface.o(i.aif_headset_interface_init) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a4]">aif_headset_interface_process</a> from aif_headset_interface.o(i.aif_headset_interface_process) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a3]">aif_headset_interface_sensorEnable</a> from aif_headset_interface.o(i.aif_headset_interface_sensorEnable) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a2]">aif_headset_interface_settingControl</a> from aif_headset_interface.o(i.aif_headset_interface_settingControl) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a5]">aif_single_phase_validation_init</a> from aif_single_phase_validation.o(i.aif_single_phase_validation_init) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a8]">aif_single_phase_validation_process</a> from aif_single_phase_validation.o(i.aif_single_phase_validation_process) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a7]">aif_single_phase_validation_sensorEnable</a> from aif_single_phase_validation.o(i.aif_single_phase_validation_sensorEnable) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[a6]">aif_single_phase_validation_settingControl</a> from aif_single_phase_validation.o(i.aif_single_phase_validation_settingControl) referenced from proj_prepare.o(.constdata)
 <LI><a href="#[99]">ap3__check_mcu</a> from chip_manager.o(i.ap3__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[98]">ap3__deinit_info0</a> from chip_manager.o(i.ap3__deinit_info0) referenced from chip_manager.o(.constdata)
 <LI><a href="#[9a]">ap3__get_uid</a> from chip_manager.o(i.ap3__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[97]">ap3__init_info0</a> from chip_manager.o(i.ap3__init_info0) referenced from chip_manager.o(.constdata)
 <LI><a href="#[9b]">be1__check_mcu</a> from chip_manager.o(i.be1__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[9c]">be1__get_uid</a> from chip_manager.o(i.be1__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[9d]">be2__check_mcu</a> from chip_manager.o(i.be2__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[9e]">be2__get_uid</a> from chip_manager.o(i.be2__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[85]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[76]">delay_ms</a> from dml_drv_bosch_bmi160.o(i.delay_ms) referenced from dml_drv_bosch_bmi160.o(i.hw_init)
 <LI><a href="#[79]">delay_us</a> from dml_drv_bosch_bmi270.o(i.delay_us) referenced 2 times from dml_drv_bosch_bmi270.o(i.hw_init)
 <LI><a href="#[6e]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1]">getChipManager2</a> from chip_manager.o(i.getChipManager2) referenced 2 times from chip_manager.o(.data)
 <LI><a href="#[3f]">getTimeNs_dt_sum</a> from sal_adv_apis.o(i.getTimeNs_dt_sum) referenced from sal_adv_apis.o(i.CWM_LibPreInit)
 <LI><a href="#[4a]">get_data</a> from dml_drv_bosch_bmi160.o(i.get_data) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[51]">get_data</a> from dml_drv_bosch_bmi270.o(i.get_data) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[58]">get_data</a> from dml_drv_bosch_bmm150.o(i.get_data) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[5f]">get_data</a> from dml_drv_st_lsm6dsl.o(i.get_data) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[66]">get_data</a> from dml_drv_st_lsm6dsox.o(i.get_data) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[6d]">get_data</a> from dml_drv_tdk_icm42607c.o(i.get_data) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[49]">hw_config</a> from dml_drv_bosch_bmi160.o(i.hw_config) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[50]">hw_config</a> from dml_drv_bosch_bmi270.o(i.hw_config) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[57]">hw_config</a> from dml_drv_bosch_bmm150.o(i.hw_config) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[5e]">hw_config</a> from dml_drv_st_lsm6dsl.o(i.hw_config) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[65]">hw_config</a> from dml_drv_st_lsm6dsox.o(i.hw_config) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[6c]">hw_config</a> from dml_drv_tdk_icm42607c.o(i.hw_config) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[46]">hw_deinit</a> from dml_drv_bosch_bmi160.o(i.hw_deinit) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[4d]">hw_deinit</a> from dml_drv_bosch_bmi270.o(i.hw_deinit) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[54]">hw_deinit</a> from dml_drv_bosch_bmm150.o(i.hw_deinit) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[5b]">hw_deinit</a> from dml_drv_st_lsm6dsl.o(i.hw_deinit) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[62]">hw_deinit</a> from dml_drv_st_lsm6dsox.o(i.hw_deinit) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[69]">hw_deinit</a> from dml_drv_tdk_icm42607c.o(i.hw_deinit) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[48]">hw_disable</a> from dml_drv_bosch_bmi160.o(i.hw_disable) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[4f]">hw_disable</a> from dml_drv_bosch_bmi270.o(i.hw_disable) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[56]">hw_disable</a> from dml_drv_bosch_bmm150.o(i.hw_disable) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[5d]">hw_disable</a> from dml_drv_st_lsm6dsl.o(i.hw_disable) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[64]">hw_disable</a> from dml_drv_st_lsm6dsox.o(i.hw_disable) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[6b]">hw_disable</a> from dml_drv_tdk_icm42607c.o(i.hw_disable) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[47]">hw_enable</a> from dml_drv_bosch_bmi160.o(i.hw_enable) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[4e]">hw_enable</a> from dml_drv_bosch_bmi270.o(i.hw_enable) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[55]">hw_enable</a> from dml_drv_bosch_bmm150.o(i.hw_enable) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[5c]">hw_enable</a> from dml_drv_st_lsm6dsl.o(i.hw_enable) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[63]">hw_enable</a> from dml_drv_st_lsm6dsox.o(i.hw_enable) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[6a]">hw_enable</a> from dml_drv_tdk_icm42607c.o(i.hw_enable) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[45]">hw_init</a> from dml_drv_bosch_bmi160.o(i.hw_init) referenced from dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
 <LI><a href="#[4c]">hw_init</a> from dml_drv_bosch_bmi270.o(i.hw_init) referenced from dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
 <LI><a href="#[53]">hw_init</a> from dml_drv_bosch_bmm150.o(i.hw_init) referenced from dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
 <LI><a href="#[5a]">hw_init</a> from dml_drv_st_lsm6dsl.o(i.hw_init) referenced from dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
 <LI><a href="#[61]">hw_init</a> from dml_drv_st_lsm6dsox.o(i.hw_init) referenced from dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
 <LI><a href="#[68]">hw_init</a> from dml_drv_tdk_icm42607c.o(i.hw_init) referenced from dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
 <LI><a href="#[74]">i2c_read</a> from dml_drv_bosch_bmi160.o(i.i2c_read) referenced 6 times from dml_drv_bosch_bmi160.o(i.hw_init)
 <LI><a href="#[75]">i2c_write</a> from dml_drv_bosch_bmi160.o(i.i2c_write) referenced 6 times from dml_drv_bosch_bmi160.o(i.hw_init)
 <LI><a href="#[72]">in_pin_handler</a> from board_nordic.o(i.in_pin_handler) referenced from board_nordic.o(i.gpio_init)
 <LI><a href="#[73]">inv_callback</a> from dml_drv_tdk_icm42607c.o(i.inv_callback) referenced from dml_drv_tdk_icm42607c.o(i.hw_enable)
 <LI><a href="#[73]">inv_callback</a> from dml_drv_tdk_icm42607c.o(i.inv_callback) referenced from dml_drv_tdk_icm42607c.o(i.hw_init)
 <LI><a href="#[40]">lib_malloc</a> from sal_adv_apis.o(i.lib_malloc) referenced from sal_adv_apis.o(i.CWM_LibPreInit)
 <LI><a href="#[37]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[96]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[95]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[94]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[92]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[93]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[8b]">one_sec_timer_handle</a> from board_nordic.o(i.one_sec_timer_handle) referenced from board_nordic.o(i.timer_init)
 <LI><a href="#[43]">process_callback</a> from sal_adv_apis.o(i.process_callback) referenced from sal_adv_apis.o(i.CWM_process2)
 <LI><a href="#[9f]">rt1__check_mcu</a> from chip_manager.o(i.rt1__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[a0]">rt1__get_uid</a> from chip_manager.o(i.rt1__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[8a]">rtc_handler</a> from board_nordic.o(i.rtc_handler) referenced from board_nordic.o(i.rtc_config)
 <LI><a href="#[3e]">sensCali_init_cbk</a> from sal_adv_apis.o(i.sensCali_init_cbk) referenced from sal_adv_apis.o(i.CWM_LibPostInit_common_adv)
 <LI><a href="#[41]">sensorEnable_callback</a> from sal_adv_apis.o(i.sensorEnable_callback) referenced from sal_adv_apis.o(i.CWM_Sensor_Disable)
 <LI><a href="#[41]">sensorEnable_callback</a> from sal_adv_apis.o(i.sensorEnable_callback) referenced from sal_adv_apis.o(i.CWM_Sensor_Enable)
 <LI><a href="#[89]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[83]">twi_handler</a> from board_nordic.o(i.twi_handler) referenced from board_nordic.o(i.i2c_init)
 <LI><a href="#[86]">twim_evt_handler</a> from nrf_drv_twi.o(i.twim_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[8c]">uart_error_handle</a> from board_nordic.o(i.uart_error_handle) referenced from board_nordic.o(i.uart_init)
 <LI><a href="#[71]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[88]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[87]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[459]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ca]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[45a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[45b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[45c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[45d]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[45e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[45f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[39d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[39e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[39c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[460]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[39b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[3a0]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[461]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[462]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platsystickTicksToUs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog_index
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_getTime_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleDataDt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputSclLog
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[463]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[464]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[11a]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogMaskInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[465]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_rx
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionSetExchange
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionGetExchange
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateHeadOrien
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode_cwm
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_mag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_accGyro
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_ctrl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat33Inverse
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictionUpdateCovP
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[466]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
</UL>

<P><STRONG><a name="[467]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_absolute_static
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_sensorEnable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_sensorEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_sensorEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt1__get_uid
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPreInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_ABAT
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectionInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hs_exchange_info
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_single_phase_validation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_gyro_temp_calibration
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_orien
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_resetStableDetect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateHeadOrien
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStableDetect
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_process
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaInit
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_all
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_DrvHandle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_proc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_ctrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReport_hw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2Skew
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDiagonalMatrix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionCheckCovariance
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMagCount
</UL>

<P><STRONG><a name="[469]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[29c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumphex
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
</UL>

<P><STRONG><a name="[2e5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
</UL>

<P><STRONG><a name="[1e7]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>

<P><STRONG><a name="[2d4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>

<P><STRONG><a name="[451]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
</UL>

<P><STRONG><a name="[1b8]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_temperature_update
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimator
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
</UL>

<P><STRONG><a name="[46a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_min
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroArray
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_max
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroArray
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_temperature_update
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asdInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
</UL>

<P><STRONG><a name="[46b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[46e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[be]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[46f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>AccelStillnessDetect</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, cwm_stillness_detect.o(i.AccelStillnessDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AccelStillnessDetect &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectReset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stillnessBatchCheck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillnessUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[d7]"></a>Activate_resetStableDetect</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, cwm_headset_orien.o(i.Activate_resetStableDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Activate_resetStableDetect &rArr; RunHeadCorrection &rArr; ResetYaw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStableDetect
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_head_prediction
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_fusionResetYaw
</UL>

<P><STRONG><a name="[84]"></a>CWM_AP_SensorListen</STRONG> (Thumb, 982 bytes, Stack size 264 bytes, main.o(i.CWM_AP_SensorListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = CWM_AP_SensorListen &rArr; CWM_Sensor_Enable &rArr; CWM_Sensor_Enable_common &rArr; setAndReportRequestSensor_byNeedHwSens &rArr; setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Disable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e0]"></a>CWM_CustomSensorInput</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sal_adv_apis.o(i.CWM_CustomSensorInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>

<P><STRONG><a name="[138]"></a>CWM_CustomSensorInput_Fifo_End</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_CustomSensorInput_Fifo_End))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
</UL>

<P><STRONG><a name="[330]"></a>CWM_CustomSensorInput_Fifo_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_CustomSensorInput_Fifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_common_post_setting
</UL>

<P><STRONG><a name="[13a]"></a>CWM_CustomSensorInput_Fifo_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_CustomSensorInput_Fifo_Start))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
</UL>

<P><STRONG><a name="[e1]"></a>CWM_CustomSensorInput_common</STRONG> (Thumb, 514 bytes, Stack size 560 bytes, sal_adv_apis.o(i.CWM_CustomSensorInput_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getSclLog9Opt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getSclLog8Opt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust3AxisMode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
</UL>

<P><STRONG><a name="[eb]"></a>CWM_Dml_GetData</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, dml_core.o(i.CWM_Dml_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CWM_Dml_GetData &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isSkipOn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleDataDt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
</UL>

<P><STRONG><a name="[ef]"></a>CWM_Dml_LibInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dml_core.o(i.CWM_Dml_LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CWM_Dml_LibInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_RegisterLibApi
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>CWM_Dml_process</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dml_core.o(i.CWM_Dml_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CWM_Dml_process &rArr; CWM_Dml_GetData &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isSkipOn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMethod_CWM_process
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>CWM_LibPostInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sal_adv_apis.o(i.CWM_LibPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CWM_LibPostInit &rArr; CWM_LibPostInit_common_adv &rArr; amh_sensCali_init &rArr; cwm_sensor_calibration_init &rArr; init_cwm_gyro_temp_calibration &rArr; set_config_stillDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_prepare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_LogMaskInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit_common
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit_common_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>CWM_LibPostInit_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, common_prepare.o(i.CWM_LibPostInit_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CWM_LibPostInit_common
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[f7]"></a>CWM_LibPostInit_common_adv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sal_adv_apis.o(i.CWM_LibPostInit_common_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CWM_LibPostInit_common_adv &rArr; amh_sensCali_init &rArr; cwm_sensor_calibration_init &rArr; init_cwm_gyro_temp_calibration &rArr; set_config_stillDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[fe]"></a>CWM_LibPreInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sal_adv_apis.o(i.CWM_LibPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CWM_LibPreInit &rArr; sys_heap1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>CWM_OS_GetTimeNs</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, board_nordic.o(i.CWM_OS_GetTimeNs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CWM_OS_GetTimeNs &rArr; platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platsystickTicksToUs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcElapsedTicks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>CWM_OS_dbgOutput</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_nordic.o(i.CWM_OS_dbgOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CWM_OS_dbgOutput &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>CWM_OS_dbgPrintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, board_nordic.o(i.CWM_OS_dbgPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CWM_OS_dbgPrintf &rArr; CWM_OS_dbgOutput &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgOutput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
</UL>

<P><STRONG><a name="[90]"></a>CWM_OS_i2cRead</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, board_nordic.o(i.CWM_OS_i2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CWM_OS_i2cRead &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_rx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>CWM_OS_i2cWrite</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, board_nordic.o(i.CWM_OS_i2cWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CWM_OS_i2cWrite &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>CWM_OS_uSleep</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, board_nordic.o(i.CWM_OS_uSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CWM_OS_uSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>CWM_RegisterLibApi</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_RegisterLibApi))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_LibInit
</UL>

<P><STRONG><a name="[dd]"></a>CWM_Sensor_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = CWM_Sensor_Disable &rArr; CWM_Sensor_Enable_common &rArr; setAndReportRequestSensor_byNeedHwSens &rArr; setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
</UL>

<P><STRONG><a name="[de]"></a>CWM_Sensor_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = CWM_Sensor_Enable &rArr; CWM_Sensor_Enable_common &rArr; setAndReportRequestSensor_byNeedHwSens &rArr; setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
</UL>

<P><STRONG><a name="[108]"></a>CWM_Sensor_Enable_common</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, sal_adv_apis.o(i.CWM_Sensor_Enable_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = CWM_Sensor_Enable_common &rArr; setAndReportRequestSensor_byNeedHwSens &rArr; setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_proj
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor_byNeedHwSens
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_hw
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_comm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_proj
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_hw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Disable
</UL>

<P><STRONG><a name="[392]"></a>CWM_SettingControl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_SettingControl))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>CWM_SettingControl_internal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_SettingControl_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CWM_SettingControl_internal &rArr; CWM_SettingControl_adv &rArr; CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_all
</UL>

<P><STRONG><a name="[f4]"></a>CWM_process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_process))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
</UL>

<P><STRONG><a name="[11f]"></a>CWM_process2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sal_adv_apis.o(i.CWM_process2))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CWM_process2 &rArr; CWM_process_common &rArr; sensorReport_hw &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>

<P><STRONG><a name="[120]"></a>CWM_process_common</STRONG> (Thumb, 230 bytes, Stack size 128 bytes, sal_adv_apis.o(i.CWM_process_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = CWM_process_common &rArr; sensorReport_hw &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLibRunning
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLogStat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_proc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReport_hw
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
</UL>

<P><STRONG><a name="[ad]"></a>DmlDrv_Register_bosch_bmi160</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmlDrv_Register_bosch_bmi160
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_all_entry_list.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>DmlDrv_Register_bosch_bmi270</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmlDrv_Register_bosch_bmi270
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_all_entry_list.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>DmlDrv_Register_bosch_bmm150</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmlDrv_Register_bosch_bmm150
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_all_entry_list.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>DmlDrv_Register_st_lsm6dsl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmlDrv_Register_st_lsm6dsl
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_all_entry_list.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>DmlDrv_Register_st_lsm6dsox</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmlDrv_Register_st_lsm6dsox
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_all_entry_list.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>DmlDrv_Register_tdk_icm42607c</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmlDrv_Register_tdk_icm42607c
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_all_entry_list.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>Dml_SensorInput</STRONG> (Thumb, 610 bytes, Stack size 248 bytes, dml_core.o(i.Dml_SensorInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isSkipOn
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;procMethod_CWM_process
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleDataDt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayRatio
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adj3Axis
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[137]"></a>Dml_SensorInput_FifoEnd</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dml_core.o(i.Dml_SensorInput_FifoEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Dml_SensorInput_FifoEnd &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_End
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[139]"></a>Dml_SensorInput_FifoStart</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dml_core.o(i.Dml_SensorInput_FifoStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dml_SensorInput_FifoStart &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[f1]"></a>Dml_ebdStr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dml_core.o(i.Dml_ebdStr))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_LibInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmlDrv_Register_tdk_icm42607c
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmlDrv_Register_st_lsm6dsox
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmlDrv_Register_st_lsm6dsl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmlDrv_Register_bosch_bmm150
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmlDrv_Register_bosch_bmi270
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmlDrv_Register_bosch_bmi160
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
</UL>

<P><STRONG><a name="[13c]"></a>Dml_getTime_us</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dml_core.o(i.Dml_getTime_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Dml_getTime_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_time_us
</UL>

<P><STRONG><a name="[333]"></a>Dml_get_all_entry_list</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dml_drv_all_entry_list.o(i.Dml_get_all_entry_list))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_all
</UL>

<P><STRONG><a name="[13d]"></a>Dml_i2c_read</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, dml_core.o(i.Dml_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_i2c_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumphex
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[140]"></a>Dml_i2c_write</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, dml_core.o(i.Dml_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_i2c_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumphex
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[ec]"></a>Dml_isMgrLogOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dml_core.o(i.Dml_isMgrLogOn))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_DrvHandle
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
</UL>

<P><STRONG><a name="[ed]"></a>Dml_isSkipOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dml_core.o(i.Dml_isSkipOn))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
</UL>

<P><STRONG><a name="[142]"></a>Dml_sleep_us</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dml_core.o(i.Dml_sleep_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[12]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[394]"></a>GetSedenActMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_seden_activity_interface.o(i.GetSedenActMemSize))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_interface
</UL>

<P><STRONG><a name="[15b]"></a>Get_Headset_exchange_info</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, cwm_headset_interface.o(i.Get_Headset_exchange_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Get_Headset_exchange_info &rArr; fusionGetExchange
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionGetQuat
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionGetExchange
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hs_exchange_info
</UL>

<P><STRONG><a name="[15f]"></a>GyroStillnessDetect</STRONG> (Thumb, 660 bytes, Stack size 64 bytes, cwm_stillness_detect.o(i.GyroStillnessDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GyroStillnessDetect &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_round
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectReset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stillnessBatchCheck
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_stillness_limit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillnessUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[c]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>QuatToOrien</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, cwm_fusion_utility.o(i.QuatToOrien))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QuatToOrien &rArr; RotMatToOrien &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToRotMat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToOrien
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
</UL>

<P><STRONG><a name="[16b]"></a>QuatToRotMat</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, cwm_fusion_utility.o(i.QuatToRotMat))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToOrien
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[181]"></a>QuaternionConjugate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cwm_fusion_utility.o(i.QuaternionConjugate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QuaternionConjugate
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionDelta
</UL>

<P><STRONG><a name="[180]"></a>QuaternionDelta</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, cwm_fusion_utility.o(i.QuaternionDelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QuaternionDelta &rArr; QuaternionConjugate
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionConjugate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionProduct
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
</UL>

<P><STRONG><a name="[182]"></a>QuaternionEstimator</STRONG> (Thumb, 346 bytes, Stack size 216 bytes, cwm_fusion_utility.o(i.QuaternionEstimator))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_crossProduct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_normalize
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToQuat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToEstimate
</UL>

<P><STRONG><a name="[184]"></a>QuaternionEstimatorInitToNorth</STRONG> (Thumb, 226 bytes, Stack size 104 bytes, cwm_fusion_utility.o(i.QuaternionEstimatorInitToNorth))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = QuaternionEstimatorInitToNorth &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_copysign
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_crossProduct
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_transpose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_normalize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToQuat
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToEstimate
</UL>

<P><STRONG><a name="[175]"></a>QuaternionNormalize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cwm_fusion_utility.o(i.QuaternionNormalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QuaternionNormalize &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToQuat
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[174]"></a>QuaternionProduct</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, cwm_fusion_utility.o(i.QuaternionProduct))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionDelta
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[15d]"></a>QuaternionToFloat</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cwm_fusion_utility.o(i.QuaternionToFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QuaternionToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Headset_exchange_info
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
</UL>

<P><STRONG><a name="[17]"></a>RTC0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.RTC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC0_IRQHandler &rArr; irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>RotAngleToQuat</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cwm_fusion_utility.o(i.RotAngleToQuat))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RotAngleToQuat &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
</UL>

<P><STRONG><a name="[17f]"></a>RotMatToOrien</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, cwm_fusion_utility.o(i.RotMatToOrien))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RotMatToOrien &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_atan2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToOrien
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
</UL>

<P><STRONG><a name="[183]"></a>RotMatToQuat</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cwm_fusion_utility.o(i.RotMatToQuat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RotMatToQuat &rArr; QuaternionNormalize &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_copysign
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clamp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionNormalize
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimator
</UL>

<P><STRONG><a name="[173]"></a>RotVecToQuat</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cwm_fusion_utility.o(i.RotVecToQuat))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RotVecToQuat &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[192]"></a>RotateOrientation</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, cwm_headset_orien.o(i.RotateOrientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RotateOrientation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_interface
</UL>

<P><STRONG><a name="[198]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[19a]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[f]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twim.o(.constdata)
<LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>Set_Headset_exchange_info</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, cwm_headset_interface.o(i.Set_Headset_exchange_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Set_Headset_exchange_info &rArr; fusionSetExchange
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionSetExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hs_exchange_info
</UL>

<P><STRONG><a name="[ce]"></a>StillDetectReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cwm_stillness_detect.o(i.StillDetectReset))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration_reset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stillnessBatchCheck
</UL>

<P><STRONG><a name="[1ac]"></a>StillDetectionInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cwm_stillness_detect.o(i.StillDetectionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StillDetectionInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[1b4]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_103
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_98
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_66
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_36
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_136
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_120
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_115
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[472]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[103]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgOutput
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_malloc
</UL>

<P><STRONG><a name="[473]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[474]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1bb]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[475]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[423]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
</UL>

<P><STRONG><a name="[476]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[477]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1bc]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[478]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumphex
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>

<P><STRONG><a name="[479]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[47a]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1bd]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47b]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[47c]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[47d]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[104]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>

<P><STRONG><a name="[1c2]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1c0]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_asin
</UL>

<P><STRONG><a name="[1c7]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_atan2
</UL>

<P><STRONG><a name="[1c9]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
</UL>

<P><STRONG><a name="[12b]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUpdateScaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAccUpdateScaler
</UL>

<P><STRONG><a name="[47e]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[1cc]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
</UL>

<P><STRONG><a name="[1cd]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asdInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accStillnessDetect
</UL>

<P><STRONG><a name="[1c4]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1c8]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1c6]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1cb]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1c3]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1ca]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[47f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[480]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[481]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c5]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[126]"></a>adv_apis_sensor_report</STRONG> (Thumb, 166 bytes, Stack size 296 bytes, sal_adv_apis.o(i.adv_apis_sensor_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getSclLog8Opt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_process
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReport_hw
</UL>

<P><STRONG><a name="[a9]"></a>aif_absolute_static_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aif_absolute_static.o(i.aif_absolute_static_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aif_absolute_static_init &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_absolute_static
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>aif_absolute_static_process</STRONG> (Thumb, 132 bytes, Stack size 136 bytes, aif_absolute_static.o(i.aif_absolute_static_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = aif_absolute_static_process &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_absolute_static
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_proj
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>aif_absolute_static_sensorEnable</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, aif_absolute_static.o(i.aif_absolute_static_sensorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aif_absolute_static_sensorEnable &rArr; init_cwm_absolute_static
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_absolute_static
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>aif_absolute_static_settingControl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, aif_absolute_static.o(i.aif_absolute_static_settingControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aif_absolute_static_settingControl &rArr; set_algo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>aif_headset_interface_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aif_headset_interface.o(i.aif_headset_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aif_headset_interface_init &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_interface
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>aif_headset_interface_process</STRONG> (Thumb, 762 bytes, Stack size 232 bytes, aif_headset_interface.o(i.aif_headset_interface_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = aif_headset_interface_process &rArr; cwm_headset_interface &rArr; ActivateHeadOrien &rArr; cwm_headset_orien &rArr; cwm_sensor_fusion &rArr; fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_interface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_proj
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_proj
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>aif_headset_interface_sensorEnable</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, aif_headset_interface.o(i.aif_headset_interface_sensorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aif_headset_interface_sensorEnable &rArr; set_algo_config &rArr; config_cwm_headset_interface &rArr; config_cwm_headset_orien &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_headset_interface
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>aif_headset_interface_settingControl</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, aif_headset_interface.o(i.aif_headset_interface_settingControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aif_headset_interface_settingControl &rArr; set_algo_config &rArr; config_cwm_headset_interface &rArr; config_cwm_headset_orien &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_fusionResetYaw
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hs_exchange_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>aif_single_phase_validation_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aif_single_phase_validation.o(i.aif_single_phase_validation_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aif_single_phase_validation_init &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_single_phase_validation
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>aif_single_phase_validation_process</STRONG> (Thumb, 458 bytes, Stack size 200 bytes, aif_single_phase_validation.o(i.aif_single_phase_validation_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = aif_single_phase_validation_process &rArr; cwm_single_phase_validation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_proj
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>aif_single_phase_validation_sensorEnable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, aif_single_phase_validation.o(i.aif_single_phase_validation_sensorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aif_single_phase_validation_sensorEnable &rArr; set_algo_config &rArr; config_cwm_single_phase_validation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_single_phase_validation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>aif_single_phase_validation_settingControl</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, aif_single_phase_validation.o(i.aif_single_phase_validation_settingControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aif_single_phase_validation_settingControl &rArr; set_algo_config &rArr; config_cwm_single_phase_validation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int6ToFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(.constdata)
</UL>
<P><STRONG><a name="[2b9]"></a>algo_LogMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, log_algo.o(i.algo_LogMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algo_LogMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_interface
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
</UL>

<P><STRONG><a name="[f9]"></a>algo_LogMaskInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log_algo.o(i.algo_LogMaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[1e6]"></a>algo_isLogOn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, log_algo.o(i.algo_isLogOn))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>

<P><STRONG><a name="[133]"></a>algo_log</STRONG> (Thumb, 90 bytes, Stack size 288 bytes, log_algo.o(i.algo_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_isLogOn
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_headset_orien
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimator
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMagNorm
</UL>

<P><STRONG><a name="[115]"></a>algo_setLogOutputFunc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_algo.o(i.algo_setLogOutputFunc))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[116]"></a>algo_setTagIdMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, log_algo.o(i.algo_setTagIdMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algo_setTagIdMask
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[429]"></a>align_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_heap_common.o(i.align_mask))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_init
</UL>

<P><STRONG><a name="[42a]"></a>align_number</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_heap_common.o(i.align_number))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_init
</UL>

<P><STRONG><a name="[42b]"></a>align_size</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_heap_common.o(i.align_size))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_malloc
</UL>

<P><STRONG><a name="[427]"></a>align_small_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_heap_common.o(i.align_small_size))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_init
</UL>

<P><STRONG><a name="[123]"></a>amh_dlog</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_dlog.o(i.amh_dlog))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>

<P><STRONG><a name="[118]"></a>amh_sensCali_config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, amh_sens_calibration.o(i.amh_sensCali_config))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[119]"></a>amh_sensCali_ctrl</STRONG> (Thumb, 430 bytes, Stack size 128 bytes, amh_sens_calibration.o(i.amh_sensCali_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = amh_sensCali_ctrl &rArr; cwm_sensor_calibration_set_bias &rArr; set_initBias_gyro_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_set_bias
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_get_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[fd]"></a>amh_sensCali_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, amh_sens_calibration.o(i.amh_sensCali_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = amh_sensCali_init &rArr; cwm_sensor_calibration_init &rArr; init_cwm_gyro_temp_calibration &rArr; set_config_stillDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_memsize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit_common_adv
</UL>

<P><STRONG><a name="[122]"></a>amh_sensCali_proc</STRONG> (Thumb, 510 bytes, Stack size 200 bytes, amh_sens_calibration.o(i.amh_sensCali_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = amh_sensCali_proc &rArr; cwm_sensor_calibration &rArr; cwm_gyro_temp_calibration &rArr; GyroStillnessDetect &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_enable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_disable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>

<P><STRONG><a name="[11c]"></a>apis_scl_common</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, apis_scl.o(i.apis_scl_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[1f3]"></a>app_error_fault_handler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[1f7]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1f8]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[207]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[1fb]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[100]"></a>app_timer_cnt_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
</UL>

<P><STRONG><a name="[42d]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[1fe]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[204]"></a>app_timer_start</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[206]"></a>app_uart_init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[20a]"></a>app_uart_put</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[20e]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[210]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[20f]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[211]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[222]"></a>bmi160_get_fifo_data</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_get_fifo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmi160_get_fifo_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[223]"></a>bmi160_get_regs</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bmi160.o(i.bmi160_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_soft_reset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_fifo_config
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_fifo_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg_temperature
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_low_g_int
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_high_g_int
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_flat_detect_int
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_under_sampling
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_hardware_interrupt
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_gyro_data
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_data
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_accel_any_motion_int
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_tap_param
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_step_detect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_dur_threshold
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_orient_int_settg
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_no_motion_dur_thr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_int_out_ctrl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_int_latch
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_any_motion_int_settg
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gyro_config
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accel_config
</UL>

<P><STRONG><a name="[224]"></a>bmi160_get_sensor_data</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bmi160_get_sensor_data &rArr; get_accel_gyro_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_gyro_data
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[228]"></a>bmi160_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bmi160_init &rArr; bmi160_soft_reset &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_soft_reset
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[22b]"></a>bmi160_set_fifo_config</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bmi160.o(i.bmi160_set_fifo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bmi160_set_fifo_config &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[22d]"></a>bmi160_set_fifo_wm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bmi160.o(i.bmi160_set_fifo_wm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmi160_set_fifo_wm &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[22e]"></a>bmi160_set_int_config</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, bmi160.o(i.bmi160_set_int_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bmi160_set_int_config &rArr; set_accel_sig_motion_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_low_g_int
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_high_g_int
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_flat_detect_int
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_hardware_interrupt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_accel_any_motion_int
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_any_motion_int_settg
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[23b]"></a>bmi160_set_power_mode</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, bmi160.o(i.bmi160_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmi160_set_power_mode &rArr; process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_under_sampling
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
</UL>

<P><STRONG><a name="[22c]"></a>bmi160_set_regs</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bmi160.o(i.bmi160_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_soft_reset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_fifo_wm
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_fifo_config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_low_g_int
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_high_g_int
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_flat_detect_int
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_under_sampling
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_hardware_interrupt
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_accel_any_motion_int
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_tap_param
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_step_detect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_dur_threshold
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_orient_int_settg
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_no_motion_dur_thr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_int_out_ctrl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_int_latch
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_any_motion_int_settg
</UL>

<P><STRONG><a name="[23d]"></a>bmi160_set_sens_conf</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_set_sens_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmi160_set_sens_conf &rArr; bmi160_set_power_mode &rArr; process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gyro_config
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[22a]"></a>bmi160_soft_reset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bmi160.o(i.bmi160_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bmi160_soft_reset &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_disable
</UL>

<P><STRONG><a name="[240]"></a>bmi270_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bmi270.o(i.bmi270_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bmi270_init &rArr; bmi2_get_gyro_cross_sense &rArr; bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[244]"></a>bmi270_map_feat_int</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bmi270.o(i.bmi270_map_feat_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmi270_map_feat_int &rArr; bmi2_map_feat_int &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[246]"></a>bmi270_sensor_disable</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bmi270.o(i.bmi270_sensor_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bmi270_sensor_disable &rArr; disable_sensor_features &rArr; set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_main_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
</UL>

<P><STRONG><a name="[24b]"></a>bmi270_sensor_enable</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bmi270.o(i.bmi270_sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bmi270_sensor_enable &rArr; enable_sensor_features &rArr; set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_main_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[24e]"></a>bmi270_set_sensor_config</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bmi270.o(i.bmi270_set_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bmi270_set_sensor_config &rArr; set_feat_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[301]"></a>bmi2_extract_input_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.bmi2_extract_input_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
</UL>

<P><STRONG><a name="[251]"></a>bmi2_get_feat_config</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
</UL>

<P><STRONG><a name="[254]"></a>bmi2_get_feature_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_get_feature_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>

<P><STRONG><a name="[258]"></a>bmi2_get_fifo_length</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_fifo_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_get_fifo_length &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[243]"></a>bmi2_get_gyro_cross_sense</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bmi2_get_gyro_cross_sense &rArr; bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[259]"></a>bmi2_get_internal_status</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_internal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_get_internal_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[253]"></a>bmi2_get_regs</STRONG> (Thumb, 126 bytes, Stack size 160 bytes, bmi2.o(i.bmi2_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_length
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg_temperature
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_main_sensors
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_main_sensors
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_data
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>

<P><STRONG><a name="[25a]"></a>bmi2_get_sensor_data</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, bmi2.o(i.bmi2_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bmi2_get_sensor_data &rArr; parse_data &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_data
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[25d]"></a>bmi2_get_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[25e]"></a>bmi2_map_data_int</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_map_data_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bmi2_map_data_int &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[245]"></a>bmi2_map_feat_int</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_map_feat_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bmi2_map_feat_int &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_map_feat_int
</UL>

<P><STRONG><a name="[25f]"></a>bmi2_read_fifo_data</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_read_fifo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bmi2_read_fifo_data &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifo_frame_structure
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[242]"></a>bmi2_sec_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bmi2_sec_init &rArr; bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[249]"></a>bmi2_set_adv_power_save</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_set_adv_power_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_set_sensor_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_disable
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
</UL>

<P><STRONG><a name="[262]"></a>bmi2_set_fifo_config</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_set_fifo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bmi2_set_fifo_config &rArr; set_maxburst_len &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
</UL>

<P><STRONG><a name="[265]"></a>bmi2_set_fifo_wm</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_set_fifo_wm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmi2_set_fifo_wm &rArr; bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[266]"></a>bmi2_set_int_pin_config</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_int_pin_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bmi2_set_int_pin_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
</UL>

<P><STRONG><a name="[252]"></a>bmi2_set_regs</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_wm
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_main_sensors
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_main_sensors
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[24f]"></a>bmi2_set_sensor_config</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bmi2_set_sensor_config &rArr; set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_set_sensor_config
</UL>

<P><STRONG><a name="[261]"></a>bmi2_soft_reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
</UL>

<P><STRONG><a name="[26b]"></a>bmi2_write_config_file</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
</UL>

<P><STRONG><a name="[26d]"></a>bmm150_get_regs</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bmm150.o(i.bmm150_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmm150_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_soft_reset
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_read_mag_data
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_op_mode
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_control_bit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_trim_registers
</UL>

<P><STRONG><a name="[26f]"></a>bmm150_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bmm150.o(i.bmm150_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmm150_init &rArr; read_trim_registers &rArr; bmm150_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_control_bit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_trim_registers
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[272]"></a>bmm150_read_mag_data</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, bmm150.o(i.bmm150_read_mag_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bmm150_read_mag_data &rArr; bmm150_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_z
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_y
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_x
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[276]"></a>bmm150_set_op_mode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bmm150.o(i.bmm150_set_op_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmm150_set_op_mode &rArr; suspend_to_sleep_mode &rArr; set_power_control_bit &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_op_mode
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_to_sleep_mode
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_control_bit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[279]"></a>bmm150_set_presetmode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bmm150.o(i.bmm150_set_presetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmm150_set_presetmode &rArr; set_odr_xyz_rep &rArr; set_odr &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr_xyz_rep
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[27b]"></a>bmm150_set_regs</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmm150.o(i.bmm150_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_soft_reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_op_mode
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_rep
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_xy_rep
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_control_bit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr
</UL>

<P><STRONG><a name="[27c]"></a>bmm150_soft_reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bmm150.o(i.bmm150_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmm150_soft_reset &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_disable
</UL>

<P><STRONG><a name="[27d]"></a>board_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board_nordic.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = board_init &rArr; uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[286]"></a>bsp_board_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_board_init &rArr; bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
</UL>

<P><STRONG><a name="[288]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[28a]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[3cf]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[29f]"></a>config_cwm_headset_interface</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cwm_headset_interface.o(i.config_cwm_headset_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = config_cwm_headset_interface &rArr; config_cwm_headset_orien &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_headset_orien
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>

<P><STRONG><a name="[2a0]"></a>config_cwm_headset_orien</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, cwm_headset_orien.o(i.config_cwm_headset_orien))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = config_cwm_headset_orien &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ThresholdInRange_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_headset_interface
</UL>

<P><STRONG><a name="[2a3]"></a>config_cwm_single_phase_validation</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, cwm_single_phase_validation.o(i.config_cwm_single_phase_validation))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = config_cwm_single_phase_validation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_round
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>

<P><STRONG><a name="[2ab]"></a>cv3_verify</STRONG> (Thumb, 518 bytes, Stack size 376 bytes, cypher3.o(i.cv3_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cv3_verify &rArr; vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_bytes2native
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
</UL>

<P><STRONG><a name="[16d]"></a>cwmMat_ABAT</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, cwm_common_utility_float.o(i.cwmMat_ABAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cwmMat_ABAT &rArr; cwmMat_multiply_trans
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_trans
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictionUpdateCovP
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[16f]"></a>cwmMat_add</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, cwm_common_utility_float.o(i.cwmMat_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cwmMat_add
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictionUpdateCovP
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[cc]"></a>cwmMat_length</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwmMat_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_absolute_static
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotVecToQuat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotAngleToQuat
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionNormalize
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro2Rotm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMagNorm
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUnitVec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAccUpdateScaler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
</UL>

<P><STRONG><a name="[12d]"></a>cwmMat_multiply</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, cwm_common_utility_float.o(i.cwmMat_multiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cwmMat_multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_ABAT
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUnitVec
</UL>

<P><STRONG><a name="[160]"></a>cwmMat_multiply_scalar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwmMat_multiply_scalar))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionProduct
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionNormalize
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro2Rotm
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[2b4]"></a>cwmMat_multiply_trans</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, cwm_common_utility_float.o(i.cwmMat_multiply_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cwmMat_multiply_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_ABAT
</UL>

<P><STRONG><a name="[12f]"></a>cwmMat_normalize</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwmMat_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwmMat_normalize &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimator
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUnitVec
</UL>

<P><STRONG><a name="[172]"></a>cwmMat_sub</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, cwm_common_utility_float.o(i.cwmMat_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cwmMat_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[171]"></a>cwmMat_transpose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwmMat_transpose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwmMat_transpose
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[12e]"></a>cwmVec_crossProduct</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwmVec_crossProduct))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimator
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUnitVec
</UL>

<P><STRONG><a name="[12a]"></a>cwmVec_dotProduct</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cwm_common_utility_float.o(i.cwmVec_dotProduct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwmVec_dotProduct
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUpdateScaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAccUpdateScaler
</UL>

<P><STRONG><a name="[2a1]"></a>cwm_ThresholdInRange_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_ThresholdInRange_int))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_set_config
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_headset_orien
</UL>

<P><STRONG><a name="[185]"></a>cwm_abs</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwm_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_abs
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
</UL>

<P><STRONG><a name="[1d6]"></a>cwm_absolute_static</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, cwm_absolute_static.o(i.cwm_absolute_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cwm_absolute_static &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_process
</UL>

<P><STRONG><a name="[190]"></a>cwm_asin</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_asin &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToOrien
</UL>

<P><STRONG><a name="[18f]"></a>cwm_atan2</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToOrien
</UL>

<P><STRONG><a name="[187]"></a>cwm_copysign</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_copysign))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToQuat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
</UL>

<P><STRONG><a name="[18b]"></a>cwm_cos</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwm_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cwm_cos &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotVecToQuat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotAngleToQuat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
</UL>

<P><STRONG><a name="[cd]"></a>cwm_fabs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_fabs))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_stillDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_initBias_gyro_calibration
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionCheckCovariance
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAccUpdateScaler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
</UL>

<P><STRONG><a name="[152]"></a>cwm_find_median</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_find_median))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
</UL>

<P><STRONG><a name="[44e]"></a>cwm_fmax</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_fmax))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
</UL>

<P><STRONG><a name="[44f]"></a>cwm_fmin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_fmin))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
</UL>

<P><STRONG><a name="[2b5]"></a>cwm_gyro_temp_calibration</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, cwm_gyro_temp_calibration.o(i.cwm_gyro_temp_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cwm_gyro_temp_calibration &rArr; GyroStillnessDetect &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_temperature_update
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration_update_check
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration
</UL>

<P><STRONG><a name="[1e0]"></a>cwm_headset_fusionResetYaw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_headset_interface.o(i.cwm_headset_fusionResetYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cwm_headset_fusionResetYaw &rArr; Activate_resetStableDetect &rArr; RunHeadCorrection &rArr; ResetYaw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_resetStableDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_settingControl
</UL>

<P><STRONG><a name="[1db]"></a>cwm_headset_interface</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, cwm_headset_interface.o(i.cwm_headset_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = cwm_headset_interface &rArr; ActivateHeadOrien &rArr; cwm_headset_orien &rArr; cwm_sensor_fusion &rArr; fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateHeadOrien
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_LogMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_process
</UL>

<P><STRONG><a name="[d5]"></a>cwm_headset_orien</STRONG> (Thumb, 378 bytes, Stack size 104 bytes, cwm_headset_orien.o(i.cwm_headset_orien))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = cwm_headset_orien &rArr; cwm_sensor_fusion &rArr; fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionGetQuat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_head_prediction
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_set_quaternion
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateHeadOrien
</UL>

<P><STRONG><a name="[2a2]"></a>cwm_inRange</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_inRange))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_headset_orien
</UL>

<P><STRONG><a name="[2bc]"></a>cwm_max</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cwm_common_utility_float.o(i.cwm_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cwm_max
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_temperature_update
</UL>

<P><STRONG><a name="[2bd]"></a>cwm_min</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cwm_common_utility_float.o(i.cwm_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cwm_min
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_temperature_update
</UL>

<P><STRONG><a name="[151]"></a>cwm_quick_sort</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, cwm_common_utility_float.o(i.cwm_quick_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = cwm_quick_sort &rArr;  cwm_quick_sort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_swapf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
</UL>

<P><STRONG><a name="[161]"></a>cwm_round</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_round))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cali_remove_bias
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accStillnessDetect
</UL>

<P><STRONG><a name="[1f0]"></a>cwm_sensor_calibration</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cwm_sensor_calibration &rArr; cwm_gyro_temp_calibration &rArr; GyroStillnessDetect &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cali_remove_bias
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyr_still_status
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_LogMask
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_proc
</UL>

<P><STRONG><a name="[1ee]"></a>cwm_sensor_calibration_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_sensor_calibration_disable &rArr; disable_cwm_gyro_temp_calibration &rArr; gyro_calibration_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_gyro_temp_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_proc
</UL>

<P><STRONG><a name="[1ef]"></a>cwm_sensor_calibration_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration_enable))
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_gyro_temp_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_proc
</UL>

<P><STRONG><a name="[1ea]"></a>cwm_sensor_calibration_get_bias</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration_get_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cwm_sensor_calibration_get_bias &rArr; get_bias_gyro_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bias_gyro_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_ctrl
</UL>

<P><STRONG><a name="[1ed]"></a>cwm_sensor_calibration_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cwm_sensor_calibration_init &rArr; init_cwm_gyro_temp_calibration &rArr; set_config_stillDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_gyro_temp_calibration
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaliMemSize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_init
</UL>

<P><STRONG><a name="[1ec]"></a>cwm_sensor_calibration_memsize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration_memsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_sensor_calibration_memsize
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaliMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_init
</UL>

<P><STRONG><a name="[1eb]"></a>cwm_sensor_calibration_set_bias</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cwm_sensor_calibration.o(i.cwm_sensor_calibration_set_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_sensor_calibration_set_bias &rArr; set_initBias_gyro_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_initBias_gyro_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_ctrl
</UL>

<P><STRONG><a name="[2bb]"></a>cwm_sensor_fusion</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, cwm_sensor_fusion.o(i.cwm_sensor_fusion))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = cwm_sensor_fusion &rArr; fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_LogMask
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToEstimate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
</UL>

<P><STRONG><a name="[2c8]"></a>cwm_sensor_fusion_get_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_sensor_fusion.o(i.cwm_sensor_fusion_get_config))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_init
</UL>

<P><STRONG><a name="[2c7]"></a>cwm_sensor_fusion_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cwm_sensor_fusion.o(i.cwm_sensor_fusion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cwm_sensor_fusion_init &rArr; cwm_sensor_fusion_set_config &rArr; InitMagCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_set_config
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_get_config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDiagonalMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
</UL>

<P><STRONG><a name="[1a3]"></a>cwm_sensor_fusion_memsize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_sensor_fusion.o(i.cwm_sensor_fusion_memsize))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_interface
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMemAddress
</UL>

<P><STRONG><a name="[2c9]"></a>cwm_sensor_fusion_set_config</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, cwm_sensor_fusion.o(i.cwm_sensor_fusion_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cwm_sensor_fusion_set_config &rArr; InitMagCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ThresholdInRange_int
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMagCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_init
</UL>

<P><STRONG><a name="[194]"></a>cwm_sensor_fusion_set_quaternion</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cwm_sensor_fusion.o(i.cwm_sensor_fusion_set_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_sensor_fusion_set_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
</UL>

<P><STRONG><a name="[18c]"></a>cwm_sin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwm_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotVecToQuat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotAngleToQuat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
</UL>

<P><STRONG><a name="[1e2]"></a>cwm_single_phase_validation</STRONG> (Thumb, 1350 bytes, Stack size 72 bytes, cwm_single_phase_validation.o(i.cwm_single_phase_validation))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cwm_single_phase_validation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accStillnessDetect
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_process
</UL>

<P><STRONG><a name="[15a]"></a>cwm_sqrt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_normalize
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_absolute_static
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToQuat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
</UL>

<P><STRONG><a name="[2be]"></a>cwm_swapf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_swapf))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
</UL>

<P><STRONG><a name="[197]"></a>cwm_weightLinearFit</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, cwm_common_utility_float.o(i.cwm_weightLinearFit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cwm_weightLinearFit &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
</UL>

<P><STRONG><a name="[2c1]"></a>disable_cwm_gyro_temp_calibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_gyro_temp_calibration.o(i.disable_cwm_gyro_temp_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_cwm_gyro_temp_calibration &rArr; gyro_calibration_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_calibration_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_disable
</UL>

<P><STRONG><a name="[13f]"></a>dumphex</STRONG> (Thumb, 178 bytes, Stack size 104 bytes, commonlib.o(i.dumphex))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcrc32
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>

<P><STRONG><a name="[1f2]"></a>ebdStr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commonlib.o(i.ebdStr))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apis_scl_common
</UL>

<P><STRONG><a name="[fb]"></a>ebdStrAmh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amh_common.o(i.ebdStrAmh))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit_common_adv
</UL>

<P><STRONG><a name="[346]"></a>enable_cwm_absolute_static</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cwm_absolute_static.o(i.enable_cwm_absolute_static))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_absolute_static
</UL>

<P><STRONG><a name="[2c2]"></a>enable_cwm_gyro_temp_calibration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_gyro_temp_calibration.o(i.enable_cwm_gyro_temp_calibration))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_enable
</UL>

<P><STRONG><a name="[1dd]"></a>enable_cwm_headset_interface</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_headset_interface.o(i.enable_cwm_headset_interface))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_sensorEnable
</UL>

<P><STRONG><a name="[e6]"></a>floatArrayM2IntString</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, commonlib.o(i.floatArrayM2IntString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = floatArrayM2IntString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatM2Int
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>

<P><STRONG><a name="[2de]"></a>floatM2Int</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, commonlib.o(i.floatM2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = floatM2Int
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalePn2num
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[15e]"></a>fusionGetExchange</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cwm_sensor_fusion.o(i.fusionGetExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fusionGetExchange
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Headset_exchange_info
</UL>

<P><STRONG><a name="[15c]"></a>fusionGetQuat</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, cwm_sensor_fusion.o(i.fusionGetQuat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fusionGetQuat
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Headset_exchange_info
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
</UL>

<P><STRONG><a name="[1a6]"></a>fusionSetExchange</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cwm_sensor_fusion.o(i.fusionSetExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fusionSetExchange
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Headset_exchange_info
</UL>

<P><STRONG><a name="[11b]"></a>getChipInfo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, chip_manager.o(i.getChipInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apis_scl_common
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[fa]"></a>getChipManager</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chip_manager.o(i.getChipManager))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit_common
</UL>

<P><STRONG><a name="[124]"></a>getLogStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common_prepare.o(i.getLogStat))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>

<P><STRONG><a name="[2e7]"></a>getSensId_proj</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sal_adv_apis.o(i.getSensId_proj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSensId_proj &rArr; getSensIdAndInfo_proj
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_proj
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorEnable_callback
</UL>

<P><STRONG><a name="[111]"></a>getSensorEnableState_proj</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sal_adv_apis.o(i.getSensorEnableState_proj))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_process
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_proj
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
</UL>

<P><STRONG><a name="[426]"></a>get_align_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_heap_common.o(i.get_align_size))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_getinfo
</UL>

<P><STRONG><a name="[2c3]"></a>get_bias_gyro_calibration</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, cwm_gyro_temp_calibration.o(i.get_bias_gyro_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_bias_gyro_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_cali_remove_bias
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_get_bias
</UL>

<P><STRONG><a name="[2bf]"></a>get_gyr_still_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_gyro_temp_calibration.o(i.get_gyr_still_status))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration
</UL>

<P><STRONG><a name="[2c0]"></a>gyro_cali_remove_bias</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, cwm_gyro_temp_calibration.o(i.gyro_cali_remove_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gyro_cali_remove_bias &rArr; get_bias_gyro_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_round
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bias_gyro_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration
</UL>

<P><STRONG><a name="[72]"></a>in_pin_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_nordic.o(i.in_pin_handler))
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.gpio_init)
</UL>
<P><STRONG><a name="[1d8]"></a>init_cwm_absolute_static</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cwm_absolute_static.o(i.init_cwm_absolute_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_cwm_absolute_static
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_absolute_static
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_sensorEnable
</UL>

<P><STRONG><a name="[2c4]"></a>init_cwm_gyro_temp_calibration</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cwm_gyro_temp_calibration.o(i.init_cwm_gyro_temp_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_cwm_gyro_temp_calibration &rArr; set_config_stillDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_stillDetect
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_confidence_range
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectionInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_init
</UL>

<P><STRONG><a name="[1dc]"></a>init_cwm_headset_interface</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cwm_headset_interface.o(i.init_cwm_headset_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_cwm_headset_interface &rArr; cwm_sensor_fusion_init &rArr; cwm_sensor_fusion_set_config &rArr; InitMagCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_interface
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_headset_interface
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_orien
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_set_config
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_get_config
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMemAddress
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_sensorEnable
</UL>

<P><STRONG><a name="[349]"></a>init_cwm_headset_orien</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cwm_headset_orien.o(i.init_cwm_headset_orien))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_cwm_headset_orien &rArr; Init_head_prediction
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_head_prediction
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
</UL>

<P><STRONG><a name="[1e3]"></a>init_cwm_single_phase_validation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cwm_single_phase_validation.o(i.init_cwm_single_phase_validation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_cwm_single_phase_validation &rArr; asdInit &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asdInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_sensorEnable
</UL>

<P><STRONG><a name="[329]"></a>inv_imu_configure_fifo</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, inv_imu_driver.o(i.inv_imu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = inv_imu_configure_fifo &rArr; inv_imu_get_config_int1 &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_config_int1
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[350]"></a>inv_imu_configure_wom</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, inv_imu_driver.o(i.inv_imu_configure_wom))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_imu_configure_wom &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[360]"></a>inv_imu_convert_odr_bitfield_to_us</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_imu_driver.o(i.inv_imu_convert_odr_bitfield_to_us))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
</UL>

<P><STRONG><a name="[308]"></a>inv_imu_device_reset</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, inv_imu_driver.o(i.inv_imu_device_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = inv_imu_device_reset &rArr; reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init_transport
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_endianness
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_otp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_disable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[34f]"></a>inv_imu_disable_high_resolution_fifo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, inv_imu_driver.o(i.inv_imu_disable_high_resolution_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = inv_imu_disable_high_resolution_fifo &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[323]"></a>inv_imu_enable_accel_low_noise_mode</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, inv_imu_driver.o(i.inv_imu_enable_accel_low_noise_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inv_imu_enable_accel_low_noise_mode &rArr; select_rcosc &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_time_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_convert_odr_bitfield_to_us
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_rcosc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[324]"></a>inv_imu_enable_accel_low_power_mode</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, inv_imu_driver.o(i.inv_imu_enable_accel_low_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = inv_imu_enable_accel_low_power_mode &rArr; select_wuosc &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_time_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_convert_odr_bitfield_to_us
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_wuosc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_rcosc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[328]"></a>inv_imu_enable_gyro_low_noise_mode</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, inv_imu_driver.o(i.inv_imu_enable_gyro_low_noise_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inv_imu_enable_gyro_low_noise_mode &rArr; select_rcosc &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_time_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_convert_odr_bitfield_to_us
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_rcosc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[343]"></a>inv_imu_get_config_int1</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_get_config_int1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_get_config_int1 &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_fifo
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[2fd]"></a>inv_imu_get_data_from_fifo</STRONG> (Thumb, 850 bytes, Stack size 80 bytes, inv_imu_driver.o(i.inv_imu_get_data_from_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = inv_imu_get_data_from_fifo &rArr; inv_imu_reset_fifo &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_time_us
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[2fb]"></a>inv_imu_get_data_from_registers</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, inv_imu_driver.o(i.inv_imu_get_data_from_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inv_imu_get_data_from_registers &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[35f]"></a>inv_imu_get_endianness</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, inv_imu_driver.o(i.inv_imu_get_endianness))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = inv_imu_get_endianness &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
</UL>

<P><STRONG><a name="[2fc]"></a>inv_imu_get_fifo_count</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, inv_imu_driver.o(i.inv_imu_get_fifo_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_imu_get_fifo_count &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[362]"></a>inv_imu_get_time_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_tdk_icm42607c.o(i.inv_imu_get_time_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_imu_get_time_us &rArr; Dml_getTime_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_getTime_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_fifo
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
</UL>

<P><STRONG><a name="[31f]"></a>inv_imu_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = inv_imu_init &rArr; init_hardware_from_ui &rArr; inv_imu_device_reset &rArr; reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[35e]"></a>inv_imu_init_transport</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, inv_imu_transport.o(i.inv_imu_init_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_imu_init_transport &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sreg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
</UL>

<P><STRONG><a name="[34c]"></a>inv_imu_read_reg</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, inv_imu_transport.o(i.inv_imu_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sreg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_register_cache_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_ln_bw
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_fsr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_frequency
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_config_int1
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_ln_bw
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_fsr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_frequency
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_fifo_count
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_registers
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_fifo
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_config_int1
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_fifo
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_timestamp_resolution
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_reset_fifo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_endianness
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_disable_high_resolution_fifo
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_wom
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_wuosc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_rcosc
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_otp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[364]"></a>inv_imu_reset_fifo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_reset_fifo &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_fifo
</UL>

<P><STRONG><a name="[320]"></a>inv_imu_set_accel_frequency</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_accel_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_accel_frequency &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[321]"></a>inv_imu_set_accel_fsr</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_accel_fsr &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[322]"></a>inv_imu_set_accel_ln_bw</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_accel_ln_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_accel_ln_bw &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[342]"></a>inv_imu_set_config_int1</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_config_int1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_config_int1 &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[325]"></a>inv_imu_set_gyro_frequency</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_gyro_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_gyro_frequency &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[326]"></a>inv_imu_set_gyro_fsr</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_gyro_fsr &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[327]"></a>inv_imu_set_gyro_ln_bw</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_gyro_ln_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_gyro_ln_bw &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[34e]"></a>inv_imu_set_timestamp_resolution</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, inv_imu_driver.o(i.inv_imu_set_timestamp_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = inv_imu_set_timestamp_resolution &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[34b]"></a>inv_imu_sleep_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_tdk_icm42607c.o(i.inv_imu_sleep_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_imu_sleep_us &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mclk_reg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_reset_fifo
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_otp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[35c]"></a>inv_imu_switch_off_mclk</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_imu_transport.o(i.inv_imu_switch_off_mclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = inv_imu_switch_off_mclk &rArr;  inv_imu_write_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_fifo
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_fifo
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mclk_reg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_reset_fifo
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_otp
</UL>

<P><STRONG><a name="[35b]"></a>inv_imu_switch_on_mclk</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, inv_imu_transport.o(i.inv_imu_switch_on_mclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_fifo
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_fifo
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mclk_reg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_reset_fifo
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_otp
</UL>

<P><STRONG><a name="[34d]"></a>inv_imu_write_reg</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, inv_imu_transport.o(i.inv_imu_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_imu_write_reg &rArr; write_mclk_reg &rArr;  inv_imu_switch_on_mclk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sreg
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mclk_reg
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_register_cache_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_ln_bw
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_fsr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_frequency
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_config_int1
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_ln_bw
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_fsr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_frequency
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_registers
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_fifo
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_timestamp_resolution
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_reset_fifo
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_disable_high_resolution_fifo
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_wom
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_wuosc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_rcosc
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_otp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware_from_ui
</UL>

<P><STRONG><a name="[2e0]"></a>isArrayDuplicate</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, cwm_common_utility_float.o(i.isArrayDuplicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isArrayDuplicate &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
</UL>

<P><STRONG><a name="[1d7]"></a>isSidEnabledAndGetIdx_proj</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sal_adv_apis.o(i.isSidEnabledAndGetIdx_proj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isSidEnabledAndGetIdx_proj &rArr; getSensIdAndInfo_proj
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_proj
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_proj
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_process
</UL>

<P><STRONG><a name="[132]"></a>isZeroFlt</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cwm_common_utility_float.o(i.isZeroFlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isArrayDuplicate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_weightLinearFit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotateOrientation
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Orien_Output
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferMovMean
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMagNorm
</UL>

<P><STRONG><a name="[2ea]"></a>lsm6dsl_acceleration_raw_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_acceleration_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[2eb]"></a>lsm6dsl_angular_rate_raw_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_angular_rate_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_angular_rate_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[30b]"></a>lsm6dsl_block_data_update_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_block_data_update_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[334]"></a>lsm6dsl_data_ready_mode_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_data_ready_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_data_ready_mode_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[2ee]"></a>lsm6dsl_fifo_data_level_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_data_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsl_fifo_data_level_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[313]"></a>lsm6dsl_fifo_data_rate_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_fifo_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[311]"></a>lsm6dsl_fifo_gy_batch_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_gy_batch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_fifo_gy_batch_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[312]"></a>lsm6dsl_fifo_mode_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_fifo_mode_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2ef]"></a>lsm6dsl_fifo_raw_data_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_raw_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsl_fifo_raw_data_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[339]"></a>lsm6dsl_fifo_watermark_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_watermark_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsl_fifo_watermark_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[310]"></a>lsm6dsl_fifo_xl_batch_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_fifo_xl_batch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_fifo_xl_batch_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2ed]"></a>lsm6dsl_from_lsb_to_celsius</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lsm6dsl_reg.o(i.lsm6dsl_from_lsb_to_celsius))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[30f]"></a>lsm6dsl_gy_data_rate_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_gy_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[30e]"></a>lsm6dsl_gy_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_gy_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[335]"></a>lsm6dsl_pin_int1_route_get</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int1_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsl_pin_int1_route_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[336]"></a>lsm6dsl_pin_int1_route_set</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int1_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[337]"></a>lsm6dsl_pin_int2_route_get</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int2_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsl_pin_int2_route_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[338]"></a>lsm6dsl_pin_int2_route_set</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, lsm6dsl_reg.o(i.lsm6dsl_pin_int2_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dsl_pin_int2_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[37f]"></a>lsm6dsl_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_temperature_raw_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_reset_set
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_reset_get
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_get
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_get
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_xl_batch_set
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_watermark_set
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_raw_data_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_mode_set
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_gy_batch_set
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_data_rate_set
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_data_level_get
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_data_ready_mode_set
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_angular_rate_raw_get
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_acceleration_raw_get
</UL>

<P><STRONG><a name="[381]"></a>lsm6dsl_reset_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_reset_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>

<P><STRONG><a name="[382]"></a>lsm6dsl_reset_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_reset_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>

<P><STRONG><a name="[2ec]"></a>lsm6dsl_temperature_raw_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_temperature_raw_get &rArr; lsm6dsl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[33a]"></a>lsm6dsl_wkup_threshold_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_wkup_threshold_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_wkup_threshold_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[380]"></a>lsm6dsl_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsl_reg.o(i.lsm6dsl_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsl_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_reset_set
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_xl_batch_set
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_watermark_set
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_mode_set
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_gy_batch_set
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_data_rate_set
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_data_ready_mode_set
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
</UL>

<P><STRONG><a name="[30d]"></a>lsm6dsl_xl_data_rate_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_xl_data_rate_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[30c]"></a>lsm6dsl_xl_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_reg.o(i.lsm6dsl_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsl_xl_full_scale_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_write_reg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2f1]"></a>lsm6dsox_acceleration_raw_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_acceleration_raw_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[2f3]"></a>lsm6dsox_angular_rate_raw_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_angular_rate_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_angular_rate_raw_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[316]"></a>lsm6dsox_block_data_update_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_block_data_update_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[33b]"></a>lsm6dsox_data_ready_mode_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_data_ready_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_data_ready_mode_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[385]"></a>lsm6dsox_embedded_sens_get</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsox_reg.o(i.lsm6dsox_embedded_sens_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dsox_embedded_sens_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
</UL>

<P><STRONG><a name="[2f7]"></a>lsm6dsox_fifo_data_level_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_data_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsox_fifo_data_level_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[31c]"></a>lsm6dsox_fifo_gy_batch_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_gy_batch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_fifo_gy_batch_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[31d]"></a>lsm6dsox_fifo_mode_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_fifo_mode_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2f9]"></a>lsm6dsox_fifo_out_raw_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_out_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsox_fifo_out_raw_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[2f8]"></a>lsm6dsox_fifo_sensor_tag_get</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_sensor_tag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_fifo_sensor_tag_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[340]"></a>lsm6dsox_fifo_watermark_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_watermark_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsox_fifo_watermark_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[31b]"></a>lsm6dsox_fifo_xl_batch_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_fifo_xl_batch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_fifo_xl_batch_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2f6]"></a>lsm6dsox_from_lsb_to_celsius</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lsm6dsox_reg.o(i.lsm6dsox_from_lsb_to_celsius))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[387]"></a>lsm6dsox_fsm_data_rate_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_fsm_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsox_fsm_data_rate_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
</UL>

<P><STRONG><a name="[388]"></a>lsm6dsox_fsm_enable_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_fsm_enable_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsox_fsm_enable_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
</UL>

<P><STRONG><a name="[31a]"></a>lsm6dsox_gy_data_rate_set</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, lsm6dsox_reg.o(i.lsm6dsox_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lsm6dsox_gy_data_rate_set &rArr; lsm6dsox_embedded_sens_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mlc_data_rate_get
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_enable_get
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_data_rate_get
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_embedded_sens_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2f2]"></a>lsm6dsox_gy_flag_data_ready_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_gy_flag_data_ready_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_gy_flag_data_ready_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[319]"></a>lsm6dsox_gy_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_gy_full_scale_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[315]"></a>lsm6dsox_i3c_disable_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6dsox_reg.o(i.lsm6dsox_i3c_disable_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsox_i3c_disable_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[386]"></a>lsm6dsox_mem_bank_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_mem_bank_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_set
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_get
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_set
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_get
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mlc_data_rate_get
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_enable_get
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_data_rate_get
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_embedded_sens_get
</UL>

<P><STRONG><a name="[389]"></a>lsm6dsox_mlc_data_rate_get</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_mlc_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsox_mlc_data_rate_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
</UL>

<P><STRONG><a name="[33c]"></a>lsm6dsox_pin_int1_route_get</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, lsm6dsox_reg.o(i.lsm6dsox_pin_int1_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsm6dsox_pin_int1_route_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_set
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[33d]"></a>lsm6dsox_pin_int1_route_set</STRONG> (Thumb, 1036 bytes, Stack size 80 bytes, lsm6dsox_reg.o(i.lsm6dsox_pin_int1_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lsm6dsox_pin_int1_route_set &rArr; lsm6dsox_pin_int2_route_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_get
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[33e]"></a>lsm6dsox_pin_int2_route_get</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, lsm6dsox_reg.o(i.lsm6dsox_pin_int2_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsm6dsox_pin_int2_route_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_set
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[33f]"></a>lsm6dsox_pin_int2_route_set</STRONG> (Thumb, 1000 bytes, Stack size 168 bytes, lsm6dsox_reg.o(i.lsm6dsox_pin_int2_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lsm6dsox_pin_int2_route_set &rArr; lsm6dsox_pin_int1_route_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_get
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[383]"></a>lsm6dsox_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsox_reg.o(i.lsm6dsox_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_full_scale_set
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_flag_data_ready_get
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_wkup_threshold_set
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_temperature_raw_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_temp_flag_data_ready_get
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_reset_set
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_reset_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_set
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_get
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_set
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_get
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_i3c_disable_set
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_full_scale_set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_flag_data_ready_get
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_xl_batch_set
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_watermark_set
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_sensor_tag_get
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_out_raw_get
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_mode_set
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_gy_batch_set
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_data_level_get
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_data_ready_mode_set
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_block_data_update_set
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_angular_rate_raw_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_acceleration_raw_get
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mlc_data_rate_get
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_enable_get
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_data_rate_get
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_embedded_sens_get
</UL>

<P><STRONG><a name="[38a]"></a>lsm6dsox_reset_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_reset_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>

<P><STRONG><a name="[38b]"></a>lsm6dsox_reset_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_reset_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>

<P><STRONG><a name="[2f4]"></a>lsm6dsox_temp_flag_data_ready_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_temp_flag_data_ready_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_temp_flag_data_ready_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[2f5]"></a>lsm6dsox_temperature_raw_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_temperature_raw_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[341]"></a>lsm6dsox_wkup_threshold_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_wkup_threshold_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_wkup_threshold_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>

<P><STRONG><a name="[384]"></a>lsm6dsox_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsox_reg.o(i.lsm6dsox_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsox_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_full_scale_set
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_wkup_threshold_set
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_reset_set
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_set
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_set
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_i3c_disable_set
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_full_scale_set
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_xl_batch_set
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_watermark_set
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_mode_set
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_gy_batch_set
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_data_ready_mode_set
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_block_data_update_set
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mem_bank_set
</UL>

<P><STRONG><a name="[318]"></a>lsm6dsox_xl_data_rate_set</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, lsm6dsox_reg.o(i.lsm6dsox_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lsm6dsox_xl_data_rate_set &rArr; lsm6dsox_embedded_sens_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_mlc_data_rate_get
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_enable_get
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fsm_data_rate_get
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_embedded_sens_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[2f0]"></a>lsm6dsox_xl_flag_data_ready_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_xl_flag_data_ready_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_xl_flag_data_ready_get &rArr; lsm6dsox_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[317]"></a>lsm6dsox_xl_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsox_reg.o(i.lsm6dsox_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsox_xl_full_scale_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_write_reg
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[37]"></a>main</STRONG> (Thumb, 448 bytes, Stack size 112 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = main &rArr; CWM_Sensor_Enable &rArr; CWM_Sensor_Enable_common &rArr; setAndReportRequestSensor_byNeedHwSens &rArr; setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cRead
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPreInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_LibInit
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_delay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d4]"></a>memsize_cwm_absolute_static</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_absolute_static.o(i.memsize_cwm_absolute_static))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_init
</UL>

<P><STRONG><a name="[159]"></a>memsize_cwm_gyro_temp_calibration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_gyro_temp_calibration.o(i.memsize_cwm_gyro_temp_calibration))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaliMemSize
</UL>

<P><STRONG><a name="[1da]"></a>memsize_cwm_headset_interface</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cwm_headset_interface.o(i.memsize_cwm_headset_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memsize_cwm_headset_interface
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_orien
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_memsize
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSedenActMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_init
</UL>

<P><STRONG><a name="[1a4]"></a>memsize_cwm_headset_orien</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_headset_orien.o(i.memsize_cwm_headset_orien))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_interface
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMemAddress
</UL>

<P><STRONG><a name="[1e1]"></a>memsize_cwm_single_phase_validation</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_single_phase_validation.o(i.memsize_cwm_single_phase_validation))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_init
</UL>

<P><STRONG><a name="[37e]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[37c]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[28c]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[399]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[2d6]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[39a]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[39f]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[3a1]"></a>nrf_balloc_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[3a3]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[3da]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[3a5]"></a>nrf_drv_clock_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[3a9]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[344]"></a>nrf_drv_twi_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[208]"></a>nrf_drv_uart_init</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[3b5]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[28f]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[3b6]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[3c6]"></a>nrf_log_backend_add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_id_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[3c8]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[3c9]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[40c]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[398]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
</UL>

<P><STRONG><a name="[1f5]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 748 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[1f6]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[3cd]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[397]"></a>nrf_log_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
</UL>

<P><STRONG><a name="[396]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[3d8]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[1f4]"></a>nrf_log_panic</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[3cc]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3d0]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[3d9]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[3ca]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3d6]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[3ce]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3cb]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3d1]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[3d7]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[3a7]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[3a6]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[3ab]"></a>nrfx_clock_lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[304]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[303]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_gpiote_in_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[302]"></a>nrfx_gpiote_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[3eb]"></a>nrfx_prs_acquire</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[3ed]"></a>nrfx_rtc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrfx_rtc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rtc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[413]"></a>nrfx_rtc_init</STRONG> (Thumb, 190 bytes, Stack size 28 bytes, nrfx_rtc.o(i.nrfx_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[3ef]"></a>nrfx_rtc_overflow_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_rtc.o(i.nrfx_rtc_overflow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_rtc_overflow_enable &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[345]"></a>nrfx_twim_enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrfx_twim_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_twim_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[3ad]"></a>nrfx_twim_init</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, nrfx_twim.o(i.nrfx_twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrfx_twim_init &rArr; nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[106]"></a>nrfx_twim_rx</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrfx_twim.o(i.nrfx_twim_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrfx_twim_rx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cRead
</UL>

<P><STRONG><a name="[3ae]"></a>nrfx_twim_tx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, nrfx_twim.o(i.nrfx_twim_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>

<P><STRONG><a name="[3f5]"></a>nrfx_twim_xfer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrfx_twim.o(i.nrfx_twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_rx
</UL>

<P><STRONG><a name="[92]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[3b0]"></a>nrfx_uart_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[3b2]"></a>nrfx_uart_rx</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[3b4]"></a>nrfx_uart_tx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[20c]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[93]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[3af]"></a>nrfx_uarte_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[3b1]"></a>nrfx_uarte_rx</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[3b3]"></a>nrfx_uarte_tx</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[20b]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[fc]"></a>pif_dtCali_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pif_dt_calibration.o(i.pif_dtCali_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pif_dtCali_init &rArr; set_algo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit_common_adv
</UL>

<P><STRONG><a name="[121]"></a>pif_dtCali_process</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, pif_dt_calibration.o(i.pif_dtCali_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pif_dtCali_process &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_algo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>

<P><STRONG><a name="[11d]"></a>pif_dtCali_settingControl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pif_dt_calibration.o(i.pif_dtCali_settingControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pif_dtCali_settingControl &rArr; set_algo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[f8]"></a>proj_prepare</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, proj_prepare.o(i.proj_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proj_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setProjAlgoFuncTable
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMapSensProjTable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[410]"></a>rsa_decrypt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cypher.o(i.rsa_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsa_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
</UL>

<P><STRONG><a name="[40e]"></a>setMapSensProjTable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sal_adv_apis.o(i.setMapSensProjTable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_prepare
</UL>

<P><STRONG><a name="[40f]"></a>setProjAlgoFuncTable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sal_adv_apis.o(i.setProjAlgoFuncTable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_prepare
</UL>

<P><STRONG><a name="[428]"></a>set_align_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_heap_common.o(i.set_align_size))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_init
</UL>

<P><STRONG><a name="[348]"></a>set_config_confidence_range</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_stillness_detect.o(i.set_config_confidence_range))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[416]"></a>set_config_cwm_absolute_static</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cwm_absolute_static.o(i.set_config_cwm_absolute_static))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>

<P><STRONG><a name="[347]"></a>set_config_stillDetect</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cwm_stillness_detect.o(i.set_config_stillDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_config_stillDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[2c5]"></a>set_initBias_gyro_calibration</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cwm_gyro_temp_calibration.o(i.set_initBias_gyro_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_initBias_gyro_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_set_bias
</UL>

<P><STRONG><a name="[422]"></a>sha1digest</STRONG> (Thumb, 578 bytes, Stack size 568 bytes, commonlib.o(i.sha1digest))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sha1digest &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
</UL>

<P><STRONG><a name="[1c1]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[e9]"></a>syc_getFeatureDbg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(i.syc_getFeatureDbg))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>

<P><STRONG><a name="[e3]"></a>syc_getFeatureLog</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(i.syc_getFeatureLog))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[42c]"></a>syc_getInternalFeatureDbg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(i.syc_getInternalFeatureDbg))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>

<P><STRONG><a name="[e5]"></a>syc_getSclLog8Opt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, syscfg.o(i.syc_getSclLog8Opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syc_getSclLog8Opt
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>

<P><STRONG><a name="[e4]"></a>syc_getSclLog9Opt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(i.syc_getSclLog9Opt))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>

<P><STRONG><a name="[109]"></a>syc_isLibRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscfg.o(i.syc_isLibRunning))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[128]"></a>syc_setLibRunning</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syscfg.o(i.syc_setLibRunning))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>

<P><STRONG><a name="[e2]"></a>sys_GetTimeNs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysplat.o(i.sys_GetTimeNs))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_getTime_us
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[e8]"></a>sys_dbgPrintf</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sysplat.o(i.sys_dbgPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3__init_info0
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumphex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_DrvHandle
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputSclLog
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agLogout
</UL>

<P><STRONG><a name="[117]"></a>sys_heap1_getinfo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sys_heap1.o(i.sys_heap1_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_heap1_getinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_align_size
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_malloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[ff]"></a>sys_heap1_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sys_heap1.o(i.sys_heap1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_heap1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_align_size
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_small_size
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_number
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPreInit
</UL>

<P><STRONG><a name="[378]"></a>sys_heap1_malloc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sys_heap1.o(i.sys_heap1_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_heap1_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_size
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_malloc
</UL>

<P><STRONG><a name="[13e]"></a>sys_i2c_read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sysplat.o(i.sys_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>

<P><STRONG><a name="[141]"></a>sys_i2c_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sysplat.o(i.sys_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>

<P><STRONG><a name="[1d5]"></a>sys_memAlloc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sysplat.o(i.sys_memAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getInternalFeatureDbg
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaMalloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensCali_init_cbk
</UL>

<P><STRONG><a name="[143]"></a>sys_uSleep</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sysplat.o(i.sys_uSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3__init_info0
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>

<P><STRONG><a name="[83]"></a>twi_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_nordic.o(i.twi_handler))
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.i2c_init)
</UL>
<P><STRONG><a name="[8c]"></a>uart_error_handle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board_nordic.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = uart_error_handle &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.uart_init)
</UL>
<P><STRONG><a name="[2d7]"></a>xcrc32</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, commonlib.o(i.xcrc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xcrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumphex
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
</UL>

<P><STRONG><a name="[391]"></a>platform_delay</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(i.platform_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = platform_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[390]"></a>platform_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = platform_init &rArr; board_init &rArr; uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>calcElapsedTicks</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, board_nordic.o(i.calcElapsedTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calcElapsedTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
</UL>

<P><STRONG><a name="[282]"></a>gpio_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, board_nordic.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gpio_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[281]"></a>i2c_init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, board_nordic.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = i2c_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[27e]"></a>nordic_system_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, board_nordic.o(i.nordic_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nordic_system_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[105]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, board_nordic.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cRead
</UL>

<P><STRONG><a name="[414]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_nordic.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[8b]"></a>one_sec_timer_handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, board_nordic.o(i.one_sec_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = one_sec_timer_handle &rArr; systickUpdate &rArr; platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.timer_init)
</UL>
<P><STRONG><a name="[102]"></a>platsystickTicksToUs</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, board_nordic.o(i.platsystickTicksToUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
</UL>

<P><STRONG><a name="[283]"></a>rtc_config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, board_nordic.o(i.rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[8a]"></a>rtc_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board_nordic.o(i.rtc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.rtc_config)
</UL>
<P><STRONG><a name="[404]"></a>systickUpdate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, board_nordic.o(i.systickUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = systickUpdate &rArr; platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platsystickTicksToUs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcElapsedTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_sec_timer_handle
</UL>

<P><STRONG><a name="[27f]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, board_nordic.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = timer_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[280]"></a>uart_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, board_nordic.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[284]"></a>bsp_board_buttons_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, boards.o(i.bsp_board_buttons_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_buttons_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[287]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[285]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>

<P><STRONG><a name="[3b8]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[289]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[291]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[85]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[292]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[3aa]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[3a8]"></a>nrf_wdt_started</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[88]"></a>uart_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[87]"></a>uarte_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[3c0]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[3c1]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[3c4]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[435]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[3ac]"></a>twi_clear_bus</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = twi_clear_bus &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[86]"></a>twim_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = twim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[3ec]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[212]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[353]"></a>interrupts_enable</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[3b9]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[215]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[214]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3ba]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[213]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[445]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3fa]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[354]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[217]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3f8]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[355]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[444]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3fc]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[216]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[356]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[3fb]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[446]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3f9]"></a>rx_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[3fe]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[3fd]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[447]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3f7]"></a>uart_irq_handler</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[218]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[357]"></a>interrupts_enable</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[3bb]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[21b]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[21a]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3bc]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[219]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[448]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[403]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[358]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[21d]"></a>nrf_uarte_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[401]"></a>nrf_uarte_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[359]"></a>nrf_uarte_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[449]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[44a]"></a>nrf_uarte_shorts_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[402]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[44c]"></a>nrf_uarte_tx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_tx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[21c]"></a>nrf_uarte_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[35a]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[400]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[44b]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[44d]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3ff]"></a>uarte_irq_handler</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_tx_amount_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_shorts_disable
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[2db]"></a>finish_transfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_spim.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[19e]"></a>irq_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[3c2]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[2dd]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[36a]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[36b]"></a>nrf_spim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_spim.o(i.nrf_spim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[177]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[3dc]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[3dd]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[3ea]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[3db]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[3e8]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[156]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[3e4]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[3df]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[377]"></a>latch_pending_read_and_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.latch_pending_read_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[40b]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[3bd]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[3bf]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[155]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3be]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[3e6]"></a>nrf_gpio_pin_present_check</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_present_check))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[3c3]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[3c5]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[154]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3e2]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[3e9]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[3e5]"></a>pin_configured_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_configured_set
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[3e3]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[3de]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[3e1]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[3e7]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[157]"></a>port_event_handle</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[40a]"></a>port_handler_pin_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_pin_get))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[3e0]"></a>port_handler_polarity_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[188]"></a>irq_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_rtc.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_is_enabled
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_pending
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_IRQHandler
</UL>

<P><STRONG><a name="[370]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[36e]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[3f0]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
</UL>

<P><STRONG><a name="[36d]"></a>nrf_rtc_event_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_pending))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[36f]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[3f1]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
</UL>

<P><STRONG><a name="[36c]"></a>nrf_rtc_int_is_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[3ee]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
</UL>

<P><STRONG><a name="[1b5]"></a>irq_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[371]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[372]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[373]"></a>nrf_timer_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[43d]"></a>_NRFX_IRQ_PENDING_CLEAR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_twim.o(i._NRFX_IRQ_PENDING_CLEAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _NRFX_IRQ_PENDING_CLEAR
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[3f3]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, nrfx_twim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[3f2]"></a>nrf_twim_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_enable))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
</UL>

<P><STRONG><a name="[43e]"></a>nrf_twim_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[436]"></a>nrf_twim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[437]"></a>nrf_twim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[438]"></a>nrf_twim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[439]"></a>nrf_twim_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[441]"></a>nrf_twim_rx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_rx_buffer_set))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[458]"></a>nrf_twim_rxd_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_rxd_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
</UL>

<P><STRONG><a name="[43c]"></a>nrf_twim_shorts_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_shorts_set))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[43a]"></a>nrf_twim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[440]"></a>nrf_twim_tx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_tx_buffer_set))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[457]"></a>nrf_twim_txd_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_txd_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
</UL>

<P><STRONG><a name="[3f4]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[43f]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[442]"></a>twi_process_error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrfx_twim.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[19f]"></a>twim_irq_handler</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, nrfx_twim.o(i.twim_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_task_trigger
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_shorts_set
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_enable
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_errorsrc_get_and_clear
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_PENDING_CLEAR
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[3f6]"></a>twim_xfer</STRONG> (Thumb, 810 bytes, Stack size 48 bytes, nrfx_twim.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_tx_buffer_set
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_task_trigger
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_shorts_set
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_rx_buffer_set
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_enable
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_errorsrc_get_and_clear
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>

<P><STRONG><a name="[43b]"></a>xfer_completeness_check</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nrfx_twim.o(i.xfer_completeness_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_txd_amount_get
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_rxd_amount_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[28e]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[351]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[3b7]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[352]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[393]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[3a4]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[3a2]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[443]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[209]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[20d]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[71]"></a>uart_event_handler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[1fa]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[1f9]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[2da]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[1fc]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[200]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[202]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[431]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[201]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[293]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[42e]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[42f]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[379]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[297]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[296]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1fd]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[203]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[295]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_start &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1ff]"></a>rtc1_stop</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[294]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[434]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[1a0]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[430]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[37b]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[37a]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[205]"></a>timer_start_op_schedule</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[189]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[298]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[432]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[433]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[96]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[3c7]"></a>backend_id_assign</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.backend_id_assign))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[28b]"></a>buf_prealloc</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[2d5]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[37d]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[28d]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[395]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[424]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[3d2]"></a>std_n</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[3d5]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[3d3]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[40d]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[199]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[19b]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[19d]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[19c]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[1b0]"></a>nrf52_errata_103</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_103))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b1]"></a>nrf52_errata_115</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_115))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b2]"></a>nrf52_errata_120</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_120))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b3]"></a>nrf52_errata_136</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ad]"></a>nrf52_errata_36</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ae]"></a>nrf52_errata_66</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1af]"></a>nrf52_errata_98</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_98))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[112]"></a>CWM_SettingControl_adv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sal_adv_apis.o(i.CWM_SettingControl_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CWM_SettingControl_adv &rArr; CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_internal
</UL>

<P><STRONG><a name="[113]"></a>CWM_SettingControl_common</STRONG> (Thumb, 566 bytes, Stack size 96 bytes, sal_adv_apis.o(i.CWM_SettingControl_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_getinfo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_settingControl
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apis_scl_common
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_ctrl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_sensCali_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_setTagIdMask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_setLogOutputFunc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputSclLog
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[3c]"></a>LogMaskInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sal_adv_apis.o(i.LogMaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LogMaskInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_adv_apis.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[ea]"></a>adjust3AxisMode</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, sal_adv_apis.o(i.adjust3AxisMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adjust3AxisMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_common
</UL>

<P><STRONG><a name="[42]"></a>agLogout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sal_adv_apis.o(i.agLogout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agLogout &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_adv_apis.o(i.CWM_SettingControl_common)
</UL>
<P><STRONG><a name="[10d]"></a>getSensIdAndInfo_comm</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sal_adv_apis.o(i.getSensIdAndInfo_comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSensIdAndInfo_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_comm
</UL>

<P><STRONG><a name="[10a]"></a>getSensIdAndInfo_hw</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sal_adv_apis.o(i.getSensIdAndInfo_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSensIdAndInfo_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_hw
</UL>

<P><STRONG><a name="[110]"></a>getSensIdAndInfo_proj</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sal_adv_apis.o(i.getSensIdAndInfo_proj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSensIdAndInfo_proj
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_proj
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensId_proj
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
</UL>

<P><STRONG><a name="[10e]"></a>getSensorEnableState_comm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sal_adv_apis.o(i.getSensorEnableState_comm))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_comm
</UL>

<P><STRONG><a name="[10b]"></a>getSensorEnableState_hw</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sal_adv_apis.o(i.getSensorEnableState_hw))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_hw
</UL>

<P><STRONG><a name="[3f]"></a>getTimeNs_dt_sum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sal_adv_apis.o(i.getTimeNs_dt_sum))
<BR>[Address Reference Count : 1]<UL><LI> sal_adv_apis.o(i.CWM_LibPreInit)
</UL>
<P><STRONG><a name="[125]"></a>isSidEnabledAndGetIdx_comm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sal_adv_apis.o(i.isSidEnabledAndGetIdx_comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isSidEnabledAndGetIdx_comm &rArr; getSensIdAndInfo_comm
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_comm
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor
</UL>

<P><STRONG><a name="[376]"></a>isSidEnabledAndGetIdx_hw</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sal_adv_apis.o(i.isSidEnabledAndGetIdx_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isSidEnabledAndGetIdx_hw &rArr; getSensIdAndInfo_hw
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorEnableState_hw
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensIdAndInfo_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReport_hw
</UL>

<P><STRONG><a name="[40]"></a>lib_malloc</STRONG> (Thumb, 40 bytes, Stack size 64 bytes, sal_adv_apis.o(i.lib_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lib_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_malloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_heap1_getinfo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_adv_apis.o(i.CWM_LibPreInit)
</UL>
<P><STRONG><a name="[114]"></a>outputSclLog</STRONG> (Thumb, 122 bytes, Stack size 104 bytes, sal_adv_apis.o(i.outputSclLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = outputSclLog &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_common
</UL>

<P><STRONG><a name="[43]"></a>process_callback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sal_adv_apis.o(i.process_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_adv_apis.o(i.CWM_process2)
</UL>
<P><STRONG><a name="[3e]"></a>sensCali_init_cbk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sal_adv_apis.o(i.sensCali_init_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sensCali_init_cbk &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_adv_apis.o(i.CWM_LibPostInit_common_adv)
</UL>
<P><STRONG><a name="[41]"></a>sensorEnable_callback</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sal_adv_apis.o(i.sensorEnable_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sensorEnable_callback &rArr; getSensId_proj &rArr; getSensIdAndInfo_proj
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensId_proj
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sal_adv_apis.o(i.CWM_Sensor_Disable)
<LI> sal_adv_apis.o(i.CWM_Sensor_Enable)
</UL>
<P><STRONG><a name="[127]"></a>sensorReport_hw</STRONG> (Thumb, 318 bytes, Stack size 104 bytes, sal_adv_apis.o(i.sensorReport_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sensorReport_hw &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process_common
</UL>

<P><STRONG><a name="[10c]"></a>setAndReportRequestSensor</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, sal_adv_apis.o(i.setAndReportRequestSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_apis_sensor_report
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSidEnabledAndGetIdx_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor_byNeedHwSens
</UL>

<P><STRONG><a name="[10f]"></a>setAndReportRequestSensor_byNeedHwSens</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sal_adv_apis.o(i.setAndReportRequestSensor_byNeedHwSens))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = setAndReportRequestSensor_byNeedHwSens &rArr; setAndReportRequestSensor &rArr; adv_apis_sensor_report &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndReportRequestSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable_common
</UL>

<P><STRONG><a name="[3b]"></a>SensorListen</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, dml_core.o(i.SensorListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SensorListen &rArr; hw_enable_all &rArr; hw_init_all &rArr; CWM_SettingControl_internal &rArr; CWM_SettingControl_adv &rArr; CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_core.o(i.CWM_Dml_LibInit)
</UL>
<P><STRONG><a name="[3a]"></a>SettingControl</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, dml_core.o(i.SettingControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SettingControl &rArr; hw_enable_all &rArr; hw_init_all &rArr; CWM_SettingControl_internal &rArr; CWM_SettingControl_adv &rArr; CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_all
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_mag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_accGyro
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_accGyro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_core.o(i.CWM_Dml_LibInit)
</UL>
<P><STRONG><a name="[13b]"></a>__embedded_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dml_core.o(i.__embedded_string))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_ebdStr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>

<P><STRONG><a name="[135]"></a>adj3Axis</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dml_core.o(i.adj3Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adj3Axis
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>

<P><STRONG><a name="[136]"></a>arrayRatio</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dml_core.o(i.arrayRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arrayRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>

<P><STRONG><a name="[ee]"></a>getHandleDataDt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dml_core.o(i.getHandleDataDt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getHandleDataDt &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_GetData
</UL>

<P><STRONG><a name="[2ff]"></a>get_hw_drv_handle</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, dml_core.o(i.get_hw_drv_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_hw_drv_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_mag
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_accGyro
</UL>

<P><STRONG><a name="[1aa]"></a>get_hw_drv_handle_accGyro</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dml_core.o(i.get_hw_drv_handle_accGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_hw_drv_handle_accGyro &rArr; get_hw_drv_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_accGyro
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
</UL>

<P><STRONG><a name="[300]"></a>get_hw_drv_handle_mag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dml_core.o(i.get_hw_drv_handle_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_hw_drv_handle_mag &rArr; get_hw_drv_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_mag
</UL>

<P><STRONG><a name="[332]"></a>hwAttrOp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dml_core.o(i.hwAttrOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwAttrOp
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_DrvHandle
</UL>

<P><STRONG><a name="[1a9]"></a>hw_config_accGyro</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, dml_core.o(i.hw_config_accGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hw_config_accGyro &rArr; get_hw_drv_handle_accGyro &rArr; get_hw_drv_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_setting_tbl
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_accGyro
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
</UL>

<P><STRONG><a name="[1ab]"></a>hw_config_mag</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dml_core.o(i.hw_config_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hw_config_mag &rArr; search_setting_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_setting_tbl
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
</UL>

<P><STRONG><a name="[32b]"></a>hw_enable_accGyro</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, dml_core.o(i.hw_enable_accGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hw_enable_accGyro &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_common_pre_setting
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_common_post_setting
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_accGyro
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_accGyro
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
</UL>

<P><STRONG><a name="[1a1]"></a>hw_enable_all</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dml_core.o(i.hw_enable_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hw_enable_all &rArr; hw_init_all &rArr; CWM_SettingControl_internal &rArr; CWM_SettingControl_adv &rArr; CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hw_enable_type_change
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_all
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_accGyro
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorListen
</UL>

<P><STRONG><a name="[32d]"></a>hw_enable_common_post_setting</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dml_core.o(i.hw_enable_common_post_setting))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
</UL>

<P><STRONG><a name="[32c]"></a>hw_enable_common_pre_setting</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dml_core.o(i.hw_enable_common_pre_setting))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_mag
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_accGyro
</UL>

<P><STRONG><a name="[32f]"></a>hw_enable_mag</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dml_core.o(i.hw_enable_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hw_enable_mag &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_common_pre_setting
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_common_post_setting
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_mag
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_drv_handle_mag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
</UL>

<P><STRONG><a name="[331]"></a>hw_init_DrvHandle</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, dml_core.o(i.hw_init_DrvHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hw_init_DrvHandle &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_isMgrLogOn
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwAttrOp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_all
</UL>

<P><STRONG><a name="[1a8]"></a>hw_init_all</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, dml_core.o(i.hw_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = hw_init_all &rArr; CWM_SettingControl_internal &rArr; CWM_SettingControl_adv &rArr; CWM_SettingControl_common &rArr; apis_scl_common &rArr; getChipInfo &rArr; make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_get_all_entry_list
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init_DrvHandle
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingControl
</UL>

<P><STRONG><a name="[32e]"></a>is_hw_enable_type_change</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dml_core.o(i.is_hw_enable_type_change))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable_all
</UL>

<P><STRONG><a name="[f3]"></a>procMethod_CWM_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dml_core.o(i.procMethod_CWM_process))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Dml_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>

<P><STRONG><a name="[305]"></a>search_setting_tbl</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, dml_core.o(i.search_setting_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = search_setting_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_mag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_config_accGyro
</UL>

<P><STRONG><a name="[1be]"></a>__embedded_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commonlib.o(i.__embedded_string))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>

<P><STRONG><a name="[2df]"></a>scalePn2num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, commonlib.o(i.scalePn2num))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatM2Int
</UL>

<P><STRONG><a name="[99]"></a>ap3__check_mcu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.ap3__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>ap3__deinit_info0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.ap3__deinit_info0))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ap3__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.ap3__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ap3__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ap3__init_info0</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chip_manager.o(i.ap3__init_info0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ap3__init_info0 &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[220]"></a>base64_encode_cwm</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, chip_manager.o(i.base64_encode_cwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
</UL>

<P><STRONG><a name="[9b]"></a>be1__check_mcu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.be1__check_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = be1__check_mcu &rArr; stick_ram_check_mcu &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_ram_check_mcu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>be1__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.be1__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = be1__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>be2__check_mcu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.be2__check_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = be2__check_mcu &rArr; stick_ram_check_mcu &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_ram_check_mcu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>be2__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.be2__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = be2__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[1]"></a>getChipManager2</STRONG> (Thumb, 570 bytes, Stack size 64 bytes, chip_manager.o(i.getChipManager2))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = getChipManager2 &rArr; verify_sec_v3 &rArr; cv3_verify &rArr; vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_custkey_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.data)
</UL>
<P><STRONG><a name="[2e2]"></a>get_custkey_index</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, chip_manager.o(i.get_custkey_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_custkey_index &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[2e1]"></a>make_uid_string</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, chip_manager.o(i.make_uid_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = make_uid_string &rArr; base64_encode_cwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode_cwm
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcrc32
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
</UL>

<P><STRONG><a name="[1f1]"></a>memcpy_with_int</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, chip_manager.o(i.memcpy_with_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpy_with_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_ram_check_mcu
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt1__get_uid
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_custkey_index
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;be2__get_uid
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;be1__get_uid
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3__get_uid
</UL>

<P><STRONG><a name="[9f]"></a>rt1__check_mcu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.rt1__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>rt1__get_uid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, chip_manager.o(i.rt1__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt1__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>stick_ram_check_mcu</STRONG> (Thumb, 56 bytes, Stack size 120 bytes, chip_manager.o(i.stick_ram_check_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stick_ram_check_mcu &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_ram_get_mcu_index
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;be2__check_mcu
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;be1__check_mcu
</UL>

<P><STRONG><a name="[425]"></a>stick_ram_get_mcu_index</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chip_manager.o(i.stick_ram_get_mcu_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stick_ram_get_mcu_index
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_ram_check_mcu
</UL>

<P><STRONG><a name="[2e4]"></a>verify_sec_v2</STRONG> (Thumb, 176 bytes, Stack size 168 bytes, chip_manager.o(i.verify_sec_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = verify_sec_v2 &rArr; rsa_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[2e3]"></a>verify_sec_v3</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, chip_manager.o(i.verify_sec_v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = verify_sec_v3 &rArr; cv3_verify &rArr; vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[1e8]"></a>amh_dlog_index</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, log_dlog.o(i.amh_dlog_index), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
</UL>

<P><STRONG><a name="[299]"></a>conLogItems</STRONG> (Thumb, 160 bytes, Stack size 320 bytes, log_dlog.o(i.conLogItems), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroArray
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
</UL>

<P><STRONG><a name="[1e9]"></a>dlogRaw</STRONG> (Thumb, 618 bytes, Stack size 432 bytes, log_dlog.o(i.dlogRaw), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog_index
</UL>

<P><STRONG><a name="[29b]"></a>getItemString</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, log_dlog.o(i.getItemString), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale2num
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
</UL>

<P><STRONG><a name="[29a]"></a>isZeroArray</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, log_dlog.o(i.isZeroArray), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
</UL>

<P><STRONG><a name="[2e6]"></a>scale2num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, log_dlog.o(i.scale2num), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
</UL>

<P><STRONG><a name="[38f]"></a>getMaaIndex</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, sysplat.o(i.getMaaIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getMaaIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaMalloc
</UL>

<P><STRONG><a name="[38d]"></a>getMallocInfo</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, sysplat.o(i.getMallocInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getMallocInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaInit
</UL>

<P><STRONG><a name="[38c]"></a>maaInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sysplat.o(i.maaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMallocInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>

<P><STRONG><a name="[38e]"></a>maaMalloc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sysplat.o(i.maaMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = maaMalloc &rArr; getMaaIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaaIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>

<P><STRONG><a name="[1bf]"></a>__embedded_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amh_common.o(i.__embedded_string))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
</UL>

<P><STRONG><a name="[3d]"></a>LogMaskInit</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, common_prepare.o(i.LogMaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LogMaskInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> common_prepare.o(i.CWM_LibPostInit_common)
</UL>
<P><STRONG><a name="[409]"></a>reset_algo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pif_dt_calibration.o(i.reset_algo))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_process
</UL>

<P><STRONG><a name="[408]"></a>set_algo_config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pif_dt_calibration.o(i.set_algo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_algo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_algo
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_settingControl
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pif_dtCali_init
</UL>

<P><STRONG><a name="[165]"></a>AddRoundKey</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, cypher.o(i.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[411]"></a>BlockCopy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cypher.o(i.BlockCopy))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</UL>

<P><STRONG><a name="[164]"></a>InvCipher</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cypher.o(i.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</UL>

<P><STRONG><a name="[168]"></a>InvMixColumns</STRONG> (Thumb, 970 bytes, Stack size 40 bytes, cypher.o(i.InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[166]"></a>InvShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cypher.o(i.InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[167]"></a>InvSubBytes</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cypher.o(i.InvSubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InvSubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[412]"></a>KeyExpansion</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, cypher.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</UL>

<P><STRONG><a name="[169]"></a>xtime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cypher.o(i.xtime))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
</UL>

<P><STRONG><a name="[144]"></a>EccPoint_double_jacobian</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, cypher3.o(i.EccPoint_double_jacobian))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[1b7]"></a>XYcZ_add</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, cypher3.o(i.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = XYcZ_add &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[456]"></a>add_128_128</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cypher3.o(i.add_128_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>

<P><STRONG><a name="[21e]"></a>apply_z</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, cypher3.o(i.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = apply_z &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[2ad]"></a>ecc_bytes2native</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, cypher3.o(i.ecc_bytes2native))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ecc_bytes2native
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[2ac]"></a>ecc_point_decompress</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, cypher3.o(i.ecc_point_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecc_point_decompress &rArr; mod_sqrt &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_bytes2native
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[2d8]"></a>mod_sqrt</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, cypher3.o(i.mod_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mod_sqrt &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
</UL>

<P><STRONG><a name="[455]"></a>mul_64_64</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, cypher3.o(i.mul_64_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mul_64_64
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>

<P><STRONG><a name="[14b]"></a>vli_add</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cypher3.o(i.vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[2b2]"></a>vli_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cypher3.o(i.vli_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[2ae]"></a>vli_cmp</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, cypher3.o(i.vli_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[145]"></a>vli_isZero</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cypher3.o(i.vli_isZero))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[452]"></a>vli_mmod_fast</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, cypher3.o(i.vli_mmod_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>

<P><STRONG><a name="[148]"></a>vli_modAdd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cypher3.o(i.vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_modAdd &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[2af]"></a>vli_modInv</STRONG> (Thumb, 300 bytes, Stack size 120 bytes, cypher3.o(i.vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vli_modInv &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[2b0]"></a>vli_modMult</STRONG> (Thumb, 326 bytes, Stack size 168 bytes, cypher3.o(i.vli_modMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[147]"></a>vli_modMult_fast</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, cypher3.o(i.vli_modMult_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vli_modMult_fast &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[146]"></a>vli_modSquare_fast</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, cypher3.o(i.vli_modSquare_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[149]"></a>vli_modSub</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cypher3.o(i.vli_modSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_modSub &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[453]"></a>vli_mult</STRONG> (Thumb, 186 bytes, Stack size 104 bytes, cypher3.o(i.vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_64_64
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
</UL>

<P><STRONG><a name="[2b1]"></a>vli_numBits</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cypher3.o(i.vli_numBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_numBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[14c]"></a>vli_rshift1</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, cypher3.o(i.vli_rshift1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[14d]"></a>vli_set</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cypher3.o(i.vli_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[454]"></a>vli_square</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, cypher3.o(i.vli_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_64_64
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
</UL>

<P><STRONG><a name="[2b3]"></a>vli_sub</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cypher3.o(i.vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[14a]"></a>vli_testBit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cypher3.o(i.vli_testBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vli_testBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[158]"></a>GetCaliMemSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cwm_sensor_calibration.o(i.GetCaliMemSize))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_gyro_temp_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_memsize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_calibration_init
</UL>

<P><STRONG><a name="[1e5]"></a>int6ToFloat</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aif_single_phase_validation.o(i.int6ToFloat))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_settingControl
</UL>

<P><STRONG><a name="[1e4]"></a>set_algo_config</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, aif_single_phase_validation.o(i.set_algo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = set_algo_config &rArr; config_cwm_single_phase_validation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_single_phase_validation
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_settingControl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_single_phase_validation_sensorEnable
</UL>

<P><STRONG><a name="[1d9]"></a>set_algo_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, aif_absolute_static.o(i.set_algo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_algo_config
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_absolute_static
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_settingControl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_absolute_static_sensorEnable
</UL>

<P><STRONG><a name="[1df]"></a>hs_exchange_info</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, aif_headset_interface.o(i.hs_exchange_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hs_exchange_info &rArr; Get_Headset_exchange_info &rArr; fusionGetExchange
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Headset_exchange_info
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Headset_exchange_info
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_settingControl
</UL>

<P><STRONG><a name="[1de]"></a>set_algo_config</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, aif_headset_interface.o(i.set_algo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = set_algo_config &rArr; config_cwm_headset_interface &rArr; config_cwm_headset_orien &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_headset_interface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_settingControl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_headset_interface_sensorEnable
</UL>

<P><STRONG><a name="[44]"></a>DmlDrv_UnRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmi160.o(i.DmlDrv_UnRegister))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[76]"></a>delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dml_drv_bosch_bmi160.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.hw_init)
</UL>
<P><STRONG><a name="[4a]"></a>get_data</STRONG> (Thumb, 358 bytes, Stack size 120 bytes, dml_drv_bosch_bmi160.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = get_data &rArr; Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_fifo_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg_temperature
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[49]"></a>hw_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dml_drv_bosch_bmi160.o(i.hw_config))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[46]"></a>hw_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmi160.o(i.hw_deinit))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[48]"></a>hw_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dml_drv_bosch_bmi160.o(i.hw_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hw_disable &rArr; bmi160_soft_reset &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[47]"></a>hw_enable</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, dml_drv_bosch_bmi160.o(i.hw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hw_enable &rArr; hw_interrupt_config &rArr; bmi160_set_int_config &rArr; set_accel_sig_motion_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_soft_reset
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_fifo_config
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[45]"></a>hw_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dml_drv_bosch_bmi160.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hw_init &rArr; i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.DmlDrv_Register_bosch_bmi160)
</UL>
<P><STRONG><a name="[309]"></a>hw_interrupt_config</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, dml_drv_bosch_bmi160.o(i.hw_interrupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hw_interrupt_config &rArr; bmi160_set_int_config &rArr; set_accel_sig_motion_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_fifo_wm
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[74]"></a>i2c_read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, dml_drv_bosch_bmi160.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.hw_init)
</UL>
<P><STRONG><a name="[75]"></a>i2c_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, dml_drv_bosch_bmi160.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write &rArr; Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi160.o(i.hw_init)
</UL>
<P><STRONG><a name="[2e8]"></a>readReg_temperature</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dml_drv_bosch_bmi160.o(i.readReg_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readReg_temperature &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[4b]"></a>DmlDrv_UnRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmi270.o(i.DmlDrv_UnRegister))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[79]"></a>delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmi270.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_us &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.hw_init)
</UL>
<P><STRONG><a name="[2d9]"></a>fast_soft_reset</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, dml_drv_bosch_bmi270.o(i.fast_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fast_soft_reset &rArr; bmi270_sensor_disable &rArr; disable_sensor_features &rArr; set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_disable
</UL>

<P><STRONG><a name="[51]"></a>get_data</STRONG> (Thumb, 364 bytes, Stack size 128 bytes, dml_drv_bosch_bmi270.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = get_data &rArr; Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_length
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg_temperature
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[50]"></a>hw_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dml_drv_bosch_bmi270.o(i.hw_config))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[4d]"></a>hw_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmi270.o(i.hw_deinit))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[4f]"></a>hw_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dml_drv_bosch_bmi270.o(i.hw_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hw_disable &rArr; fast_soft_reset &rArr; bmi270_sensor_disable &rArr; disable_sensor_features &rArr; set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[4e]"></a>hw_enable</STRONG> (Thumb, 314 bytes, Stack size 136 bytes, dml_drv_bosch_bmi270.o(i.hw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hw_enable &rArr; hw_interrupt_config &rArr; bmi270_set_sensor_config &rArr; set_feat_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_set_sensor_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_enable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_soft_reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[4c]"></a>hw_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dml_drv_bosch_bmi270.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = hw_init &rArr; bmi270_init &rArr; bmi2_get_gyro_cross_sense &rArr; bmi2_get_feature_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.DmlDrv_Register_bosch_bmi270)
</UL>
<P><STRONG><a name="[30a]"></a>hw_interrupt_config</STRONG> (Thumb, 166 bytes, Stack size 104 bytes, dml_drv_bosch_bmi270.o(i.hw_interrupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = hw_interrupt_config &rArr; bmi270_set_sensor_config &rArr; set_feat_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_wm
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_set_sensor_config
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_map_feat_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[77]"></a>i2c_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dml_drv_bosch_bmi270.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.hw_init)
</UL>
<P><STRONG><a name="[78]"></a>i2c_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dml_drv_bosch_bmi270.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write &rArr; Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmi270.o(i.hw_init)
</UL>
<P><STRONG><a name="[2e9]"></a>readReg_temperature</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dml_drv_bosch_bmi270.o(i.readReg_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = readReg_temperature &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[52]"></a>DmlDrv_UnRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmm150.o(i.DmlDrv_UnRegister))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[7c]"></a>delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmm150.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_us &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.hw_init)
</UL>
<P><STRONG><a name="[58]"></a>get_data</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, dml_drv_bosch_bmm150.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = get_data &rArr; Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_read_mag_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[57]"></a>hw_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dml_drv_bosch_bmm150.o(i.hw_config))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[54]"></a>hw_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_bosch_bmm150.o(i.hw_deinit))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[56]"></a>hw_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dml_drv_bosch_bmm150.o(i.hw_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hw_disable &rArr; bmm150_soft_reset &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[55]"></a>hw_enable</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dml_drv_bosch_bmm150.o(i.hw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hw_enable &rArr; bmm150_set_presetmode &rArr; set_odr_xyz_rep &rArr; set_odr &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_soft_reset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_presetmode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_op_mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[53]"></a>hw_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, dml_drv_bosch_bmm150.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hw_init &rArr; i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.DmlDrv_Register_bosch_bmm150)
</UL>
<P><STRONG><a name="[7a]"></a>i2c_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dml_drv_bosch_bmm150.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.hw_init)
</UL>
<P><STRONG><a name="[7b]"></a>i2c_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dml_drv_bosch_bmm150.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write &rArr; Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_bosch_bmm150.o(i.hw_init)
</UL>
<P><STRONG><a name="[59]"></a>DmlDrv_UnRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_st_lsm6dsl.o(i.DmlDrv_UnRegister))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[5f]"></a>get_data</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, dml_drv_st_lsm6dsl.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = get_data &rArr; Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_temperature_raw_get
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_from_lsb_to_celsius
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_raw_data_get
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_data_level_get
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_angular_rate_raw_get
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_acceleration_raw_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[5e]"></a>hw_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dml_drv_st_lsm6dsl.o(i.hw_config))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[5b]"></a>hw_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_st_lsm6dsl.o(i.hw_deinit))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[5d]"></a>hw_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dml_drv_st_lsm6dsl.o(i.hw_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hw_disable &rArr; soft_reset &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[5c]"></a>hw_enable</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsl.o(i.hw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hw_enable &rArr; soft_reset &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_full_scale_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_xl_data_rate_set
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_full_scale_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_data_rate_set
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_xl_batch_set
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_mode_set
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_gy_batch_set
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_data_rate_set
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[5a]"></a>hw_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dml_drv_st_lsm6dsl.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hw_init &rArr; i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.DmlDrv_Register_st_lsm6dsl)
</UL>
<P><STRONG><a name="[314]"></a>hw_interrupt_config</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsl.o(i.hw_interrupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hw_interrupt_config &rArr; lsm6dsl_pin_int1_route_set &rArr; lsm6dsl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_wkup_threshold_set
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_set
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int2_route_get
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_set
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_pin_int1_route_get
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_fifo_watermark_set
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_data_ready_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[7d]"></a>i2c_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsl.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.hw_init)
</UL>
<P><STRONG><a name="[7e]"></a>i2c_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsl.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write &rArr; Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsl.o(i.hw_init)
</UL>
<P><STRONG><a name="[306]"></a>soft_reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsl.o(i.soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = soft_reset &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_reset_set
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_reset_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_disable
</UL>

<P><STRONG><a name="[60]"></a>DmlDrv_UnRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_st_lsm6dsox.o(i.DmlDrv_UnRegister))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[66]"></a>get_data</STRONG> (Thumb, 502 bytes, Stack size 120 bytes, dml_drv_st_lsm6dsox.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = get_data &rArr; Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_flag_data_ready_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_temperature_raw_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_temp_flag_data_ready_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_flag_data_ready_get
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_from_lsb_to_celsius
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_sensor_tag_get
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_out_raw_get
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_data_level_get
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_angular_rate_raw_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_acceleration_raw_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[65]"></a>hw_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dml_drv_st_lsm6dsox.o(i.hw_config))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[62]"></a>hw_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_st_lsm6dsox.o(i.hw_deinit))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[64]"></a>hw_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dml_drv_st_lsm6dsox.o(i.hw_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hw_disable &rArr; soft_reset &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[63]"></a>hw_enable</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, dml_drv_st_lsm6dsox.o(i.hw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hw_enable &rArr; hw_interrupt_config &rArr; lsm6dsox_pin_int2_route_set &rArr; lsm6dsox_pin_int1_route_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_full_scale_set
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_xl_data_rate_set
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_i3c_disable_set
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_full_scale_set
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_gy_data_rate_set
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_xl_batch_set
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_mode_set
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_gy_batch_set
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_block_data_update_set
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[61]"></a>hw_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dml_drv_st_lsm6dsox.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hw_init &rArr; i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.DmlDrv_Register_st_lsm6dsox)
</UL>
<P><STRONG><a name="[31e]"></a>hw_interrupt_config</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, dml_drv_st_lsm6dsox.o(i.hw_interrupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hw_interrupt_config &rArr; lsm6dsox_pin_int2_route_set &rArr; lsm6dsox_pin_int1_route_get &rArr; lsm6dsox_mem_bank_set &rArr; lsm6dsox_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_wkup_threshold_set
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_set
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int2_route_get
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_set
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_pin_int1_route_get
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_fifo_watermark_set
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_data_ready_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[7f]"></a>i2c_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsox.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.hw_init)
</UL>
<P><STRONG><a name="[80]"></a>i2c_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsox.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write &rArr; Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_st_lsm6dsox.o(i.hw_init)
</UL>
<P><STRONG><a name="[307]"></a>soft_reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dml_drv_st_lsm6dsox.o(i.soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = soft_reset &rArr; Dml_sleep_us &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_reset_set
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsox_reset_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_sleep_us
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_disable
</UL>

<P><STRONG><a name="[67]"></a>DmlDrv_UnRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_tdk_icm42607c.o(i.DmlDrv_UnRegister))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[6d]"></a>get_data</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dml_drv_tdk_icm42607c.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = get_data &rArr; inv_imu_get_data_from_fifo &rArr; inv_imu_reset_fifo &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_fifo_count
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_registers
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_data_from_fifo
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg_temperature
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput_FifoEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[6c]"></a>hw_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dml_drv_tdk_icm42607c.o(i.hw_config))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[69]"></a>hw_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dml_drv_tdk_icm42607c.o(i.hw_deinit))
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[6b]"></a>hw_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dml_drv_tdk_icm42607c.o(i.hw_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = hw_disable &rArr; inv_imu_device_reset &rArr; reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[6a]"></a>hw_enable</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, dml_drv_tdk_icm42607c.o(i.hw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = hw_enable &rArr; inv_imu_init &rArr; init_hardware_from_ui &rArr; inv_imu_device_reset &rArr; reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_ln_bw
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_fsr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_gyro_frequency
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_ln_bw
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_fsr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_accel_frequency
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_fifo
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_interrupt_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[68]"></a>hw_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, dml_drv_tdk_icm42607c.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = hw_init &rArr; inv_imu_init &rArr; init_hardware_from_ui &rArr; inv_imu_device_reset &rArr; reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.DmlDrv_Register_tdk_icm42607c)
</UL>
<P><STRONG><a name="[32a]"></a>hw_interrupt_config</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, dml_drv_tdk_icm42607c.o(i.hw_interrupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = hw_interrupt_config &rArr; inv_imu_set_config_int1 &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_config_int1
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_get_config_int1
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_enable
</UL>

<P><STRONG><a name="[81]"></a>i2c_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dml_drv_tdk_icm42607c.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg_temperature
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.hw_init)
</UL>
<P><STRONG><a name="[82]"></a>i2c_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dml_drv_tdk_icm42607c.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write &rArr; Dml_i2c_write &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dml_drv_tdk_icm42607c.o(i.hw_init)
</UL>
<P><STRONG><a name="[73]"></a>inv_callback</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, dml_drv_tdk_icm42607c.o(i.inv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = inv_callback &rArr; Dml_SensorInput &rArr; CWM_CustomSensorInput &rArr; CWM_CustomSensorInput_common &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dml_SensorInput
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dml_drv_tdk_icm42607c.o(i.hw_enable)
<LI> dml_drv_tdk_icm42607c.o(i.hw_init)
</UL>
<P><STRONG><a name="[2fa]"></a>readReg_temperature</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dml_drv_tdk_icm42607c.o(i.readReg_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = readReg_temperature &rArr; i2c_read &rArr; Dml_i2c_read &rArr; dumphex &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[2b6]"></a>gyro_calibration_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cwm_gyro_temp_calibration.o(i.gyro_calibration_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gyro_calibration_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_gyro_temp_calibration
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[2b8]"></a>gyro_calibration_update_check</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, cwm_gyro_temp_calibration.o(i.gyro_calibration_update_check))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[2b7]"></a>gyro_temperature_update</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cwm_gyro_temp_calibration.o(i.gyro_temperature_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gyro_temperature_update &rArr; cwm_min
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_min
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_max
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gyro_temp_calibration
</UL>

<P><STRONG><a name="[1d2]"></a>accStillnessDetect</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, cwm_single_phase_validation.o(i.accStillnessDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accStillnessDetect &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_round
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asdReset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_single_phase_validation
</UL>

<P><STRONG><a name="[21f]"></a>asdInit</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cwm_single_phase_validation.o(i.asdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asdInit &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_single_phase_validation
</UL>

<P><STRONG><a name="[1d3]"></a>asdReset</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cwm_single_phase_validation.o(i.asdReset))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accStillnessDetect
</UL>

<P><STRONG><a name="[d3]"></a>ActivateHeadOrien</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, cwm_headset_interface.o(i.ActivateHeadOrien))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ActivateHeadOrien &rArr; cwm_headset_orien &rArr; cwm_sensor_fusion &rArr; fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_interface
</UL>

<P><STRONG><a name="[1a2]"></a>SetMemAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cwm_headset_interface.o(i.SetMemAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMemAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_headset_orien
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_memsize
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_interface
</UL>

<P><STRONG><a name="[23e]"></a>check_accel_config</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bmi160.o(i.check_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_accel_config &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
</UL>

<P><STRONG><a name="[23f]"></a>check_gyro_config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bmi160.o(i.check_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_gyro_config &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_sens_conf
</UL>

<P><STRONG><a name="[230]"></a>config_any_motion_int_settg</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, bmi160.o(i.config_any_motion_int_settg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = config_any_motion_int_settg &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[2a4]"></a>config_int_latch</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bmi160.o(i.config_int_latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
</UL>

<P><STRONG><a name="[2a5]"></a>config_int_out_ctrl</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, bmi160.o(i.config_int_out_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_int_out_ctrl &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
</UL>

<P><STRONG><a name="[2a6]"></a>config_no_motion_dur_thr</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bmi160.o(i.config_no_motion_dur_thr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = config_no_motion_dur_thr &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
</UL>

<P><STRONG><a name="[2a7]"></a>config_orient_int_settg</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bmi160.o(i.config_orient_int_settg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_orient_int_settg &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
</UL>

<P><STRONG><a name="[2a8]"></a>config_sig_dur_threshold</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bmi160.o(i.config_sig_dur_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_sig_dur_threshold &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
</UL>

<P><STRONG><a name="[2a9]"></a>config_step_detect</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bmi160.o(i.config_step_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_step_detect &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
</UL>

<P><STRONG><a name="[2aa]"></a>config_tap_param</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi160.o(i.config_tap_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = config_tap_param &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
</UL>

<P><STRONG><a name="[22f]"></a>enable_accel_any_motion_int</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi160.o(i.enable_accel_any_motion_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enable_accel_any_motion_int &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[225]"></a>get_accel_data</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bmi160.o(i.get_accel_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_accel_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
</UL>

<P><STRONG><a name="[227]"></a>get_accel_gyro_data</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bmi160.o(i.get_accel_gyro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_accel_gyro_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
</UL>

<P><STRONG><a name="[226]"></a>get_gyro_data</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bmi160.o(i.get_gyro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_gyro_data &rArr; bmi160_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_sensor_data
</UL>

<P><STRONG><a name="[29d]"></a>map_feature_interrupt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi160.o(i.map_feature_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = map_feature_interrupt &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_low_g_int
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_high_g_int
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_flat_detect_int
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_any_motion_int_settg
</UL>

<P><STRONG><a name="[23a]"></a>map_hardware_interrupt</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bmi160.o(i.map_hardware_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = map_hardware_interrupt &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[229]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi160.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_low_g_int
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_high_g_int
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_flat_detect_int
</UL>

<P><STRONG><a name="[23c]"></a>process_under_sampling</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bmi160.o(i.process_under_sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_under_sampling &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_power_mode
</UL>

<P><STRONG><a name="[236]"></a>set_accel_flat_detect_int</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_flat_detect_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_flat_detect_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[238]"></a>set_accel_high_g_int</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_high_g_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_high_g_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[237]"></a>set_accel_low_g_int</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_low_g_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_low_g_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[232]"></a>set_accel_no_motion_int</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_no_motion_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_no_motion_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_no_motion_dur_thr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[235]"></a>set_accel_orientation_int</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_orientation_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_orientation_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_orient_int_settg
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[231]"></a>set_accel_sig_motion_int</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bmi160.o(i.set_accel_sig_motion_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_accel_sig_motion_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sig_dur_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[234]"></a>set_accel_step_detect_int</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_step_detect_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_step_detect_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_step_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[233]"></a>set_accel_tap_int</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, bmi160.o(i.set_accel_tap_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_accel_tap_int &rArr; set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_get_regs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_regs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_intr_pin_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feature_interrupt
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_tap_param
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
</UL>

<P><STRONG><a name="[239]"></a>set_intr_pin_config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bmi160.o(i.set_intr_pin_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_intr_pin_config &rArr; config_int_latch &rArr; bmi160_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_int_out_ctrl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_int_latch
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_set_int_config
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_tap_int
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_step_detect_int
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_sig_motion_int
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_orientation_int
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_no_motion_int
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_low_g_int
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_high_g_int
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_flat_detect_int
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_any_motion_int_settg
</UL>

<P><STRONG><a name="[290]"></a>cfg_error_status</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bmi2.o(i.cfg_error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cfg_error_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[415]"></a>check_boundary_val</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, bmi2.o(i.check_boundary_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[407]"></a>comp_gyro_cross_axis_sensitivity</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bmi2.o(i.comp_gyro_cross_axis_sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_data
</UL>

<P><STRONG><a name="[29e]"></a>config_aux_interface</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bmi2.o(i.config_aux_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[2fe]"></a>extract_output_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.extract_output_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
</UL>

<P><STRONG><a name="[405]"></a>get_acc_gyr_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bmi2.o(i.get_acc_gyr_data))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_data
</UL>

<P><STRONG><a name="[256]"></a>get_gyro_cross_sense</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
</UL>

<P><STRONG><a name="[257]"></a>get_gyro_gain_update_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi2.o(i.get_gyro_gain_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_gyro_gain_update_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
</UL>

<P><STRONG><a name="[263]"></a>get_maxburst_len</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bmi2.o(i.get_maxburst_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_maxburst_len &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
</UL>

<P><STRONG><a name="[406]"></a>get_remapped_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.get_remapped_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_data
</UL>

<P><STRONG><a name="[255]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi2.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_wm
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_length
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feature_data
</UL>

<P><STRONG><a name="[25c]"></a>parse_data</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bmi2.o(i.parse_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = parse_data &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_gyr_data
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[25b]"></a>read_sensor_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bmi2.o(i.read_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = read_sensor_data &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[260]"></a>reset_fifo_frame_structure</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bmi2.o(i.reset_fifo_frame_structure))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
</UL>

<P><STRONG><a name="[267]"></a>set_accel_config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bmi2.o(i.set_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_accel_config &rArr; cfg_error_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[269]"></a>set_aux_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bmi2.o(i.set_aux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_aux_config &rArr; config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[418]"></a>set_config_load</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmi2.o(i.set_config_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = set_config_load &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[268]"></a>set_gyro_config</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bmi2.o(i.set_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_gyro_config &rArr; cfg_error_status &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[26a]"></a>set_gyro_user_gain_config</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bmi2.o(i.set_gyro_user_gain_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[264]"></a>set_maxburst_len</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bmi2.o(i.set_maxburst_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_maxburst_len &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
</UL>

<P><STRONG><a name="[450]"></a>upload_file</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(i.upload_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = upload_file &rArr; bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[26c]"></a>write_config_file</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, bmi2.o(i.write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[248]"></a>disable_main_sensors</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi270.o(i.disable_main_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = disable_main_sensors &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_disable
</UL>

<P><STRONG><a name="[24a]"></a>disable_sensor_features</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bmi270.o(i.disable_sensor_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = disable_sensor_features &rArr; set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_disable
</UL>

<P><STRONG><a name="[24c]"></a>enable_main_sensors</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi270.o(i.enable_main_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = enable_main_sensors &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_enable
</UL>

<P><STRONG><a name="[24d]"></a>enable_sensor_features</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bmi270.o(i.enable_sensor_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = enable_sensor_features &rArr; set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_enable
</UL>

<P><STRONG><a name="[241]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi270.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_set_sensor_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_disable
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_map_feat_int
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[247]"></a>select_sensor</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, bmi270.o(i.select_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_sensor_disable
</UL>

<P><STRONG><a name="[2cb]"></a>set_any_motion</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_any_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_any_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[417]"></a>set_any_motion_config</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, bmi270.o(i.set_any_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[250]"></a>set_feat_config</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bmi270.o(i.set_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_feat_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_set_sensor_config
</UL>

<P><STRONG><a name="[2d1]"></a>set_gyro_self_offset_corr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bmi270.o(i.set_gyro_self_offset_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_gyro_self_offset_corr &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[2d0]"></a>set_gyro_user_gain</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_gyro_user_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_gyro_user_gain &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[2cc]"></a>set_no_motion</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_no_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_no_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[419]"></a>set_no_motion_config</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, bmi270.o(i.set_no_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[2ca]"></a>set_sig_motion</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_sig_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_sig_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[41a]"></a>set_sig_motion_config</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bmi270.o(i.set_sig_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[2cf]"></a>set_step_activity</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_step_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_step_activity &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[41c]"></a>set_step_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi270.o(i.set_step_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[41b]"></a>set_step_count_params_config</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bmi270.o(i.set_step_count_params_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[2ce]"></a>set_step_counter</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_step_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_step_counter &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[2cd]"></a>set_step_detector</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bmi270.o(i.set_step_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_step_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[41d]"></a>set_wrist_gest_config</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, bmi270.o(i.set_wrist_gest_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[2d2]"></a>set_wrist_gesture</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bmi270.o(i.set_wrist_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_wrist_gesture &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[2d3]"></a>set_wrist_wear_wake_up</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bmi270.o(i.set_wrist_wear_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sensor_features
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sensor_features
</UL>

<P><STRONG><a name="[41e]"></a>set_wrist_wear_wake_up_config</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, bmi270.o(i.set_wrist_wear_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_config
</UL>

<P><STRONG><a name="[273]"></a>compensate_x</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, bmm150.o(i.compensate_x))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_read_mag_data
</UL>

<P><STRONG><a name="[274]"></a>compensate_y</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, bmm150.o(i.compensate_y))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_read_mag_data
</UL>

<P><STRONG><a name="[275]"></a>compensate_z</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, bmm150.o(i.compensate_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = compensate_z
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_read_mag_data
</UL>

<P><STRONG><a name="[26e]"></a>null_ptr_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bmm150.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_presetmode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_op_mode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_to_sleep_mode
</UL>

<P><STRONG><a name="[271]"></a>read_trim_registers</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, bmm150.o(i.read_trim_registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_trim_registers &rArr; bmm150_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_init
</UL>

<P><STRONG><a name="[41f]"></a>set_odr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bmm150.o(i.set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_odr &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr_xyz_rep
</UL>

<P><STRONG><a name="[27a]"></a>set_odr_xyz_rep</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bmm150.o(i.set_odr_xyz_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_odr_xyz_rep &rArr; set_odr &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_rep
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_xy_rep
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_presetmode
</UL>

<P><STRONG><a name="[270]"></a>set_power_control_bit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bmm150.o(i.set_power_control_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_power_control_bit &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_op_mode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_to_sleep_mode
</UL>

<P><STRONG><a name="[420]"></a>set_xy_rep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bmm150.o(i.set_xy_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_xy_rep &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr_xyz_rep
</UL>

<P><STRONG><a name="[421]"></a>set_z_rep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bmm150.o(i.set_z_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_z_rep &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_odr_xyz_rep
</UL>

<P><STRONG><a name="[277]"></a>suspend_to_sleep_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bmm150.o(i.suspend_to_sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = suspend_to_sleep_mode &rArr; set_power_control_bit &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_power_control_bit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_op_mode
</UL>

<P><STRONG><a name="[278]"></a>write_op_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bmm150.o(i.write_op_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_op_mode &rArr; bmm150_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_regs
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_set_op_mode
</UL>

<P><STRONG><a name="[34a]"></a>init_hardware_from_ui</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, inv_imu_driver.o(i.init_hardware_from_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = init_hardware_from_ui &rArr; inv_imu_device_reset &rArr; reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_config_int1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_set_timestamp_resolution
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_disable_high_resolution_fifo
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_configure_wom
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init
</UL>

<P><STRONG><a name="[35d]"></a>reload_otp</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, inv_imu_driver.o(i.reload_otp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = reload_otp &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_device_reset
</UL>

<P><STRONG><a name="[361]"></a>select_rcosc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, inv_imu_driver.o(i.select_rcosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = select_rcosc &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_gyro_low_noise_mode
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_noise_mode
</UL>

<P><STRONG><a name="[363]"></a>select_wuosc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, inv_imu_driver.o(i.select_wuosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = select_wuosc &rArr; inv_imu_read_reg &rArr; read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_enable_accel_low_power_mode
</UL>

<P><STRONG><a name="[cf]"></a>StillnessUpdate</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, cwm_stillness_detect.o(i.StillnessUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
</UL>

<P><STRONG><a name="[162]"></a>set_stillness_limit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cwm_stillness_detect.o(i.set_stillness_limit))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
</UL>

<P><STRONG><a name="[d0]"></a>stillnessBatchCheck</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, cwm_stillness_detect.o(i.stillnessBatchCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stillnessBatchCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectReset
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroStillnessDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
</UL>

<P><STRONG><a name="[d1]"></a>AccelStillnessDetect</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, cwm_sensor_fusion.o(i.AccelStillnessDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AccelStillnessDetect &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StillDetectReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
</UL>

<P><STRONG><a name="[129]"></a>CalcAccUpdateScaler</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, cwm_sensor_fusion.o(i.CalcAccUpdateScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalcAccUpdateScaler &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_dotProduct
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[12c]"></a>CalcMagUnitVec</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, cwm_sensor_fusion.o(i.CalcMagUnitVec))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalcMagUnitVec &rArr; cwmMat_normalize &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_crossProduct
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_normalize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[130]"></a>CalcMagUpdateScaler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cwm_sensor_fusion.o(i.CalcMagUpdateScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalcMagUpdateScaler &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_dotProduct
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[131]"></a>CheckMagNorm</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, cwm_sensor_fusion.o(i.CheckMagNorm))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CheckMagNorm &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
</UL>

<P><STRONG><a name="[163]"></a>InitMagCount</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cwm_sensor_fusion.o(i.InitMagCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitMagCount
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_set_config
</UL>

<P><STRONG><a name="[16a]"></a>MeasurementUpdate</STRONG> (Thumb, 560 bytes, Stack size 152 bytes, cwm_sensor_fusion.o(i.MeasurementUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MeasurementUpdate &rArr; mat33Inverse &rArr; makeDiagonalMatrix
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_dotProduct
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_transpose
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_sub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_normalize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_add
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_ABAT
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToRotMat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotVecToQuat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionProduct
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionNormalize
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2Skew
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat33Inverse
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDiagonalMatrix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionCheckCovariance
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUpdateScaler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMagUnitVec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAccUpdateScaler
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
</UL>

<P><STRONG><a name="[17a]"></a>PredictUpdate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, cwm_sensor_fusion.o(i.PredictUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = PredictUpdate &rArr; PredictionUpdateCovP &rArr; gyro2Rotm &rArr; RodriguesRotation &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotAngleToQuat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionProduct
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionCheckCovariance
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictionUpdateCovP
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
</UL>

<P><STRONG><a name="[17c]"></a>PredictionUpdateCovP</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, cwm_sensor_fusion.o(i.PredictionUpdateCovP))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PredictionUpdateCovP &rArr; gyro2Rotm &rArr; RodriguesRotation &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_add
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_ABAT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDiagonalMatrix
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro2Rotm
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
</UL>

<P><STRONG><a name="[18e]"></a>RodriguesRotation</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, cwm_sensor_fusion.o(i.RodriguesRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = RodriguesRotation &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_sub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_add
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDiagonalMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro2Rotm
</UL>

<P><STRONG><a name="[d2]"></a>StillDetectReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cwm_sensor_fusion.o(i.StillDetectReset))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelStillnessDetect
</UL>

<P><STRONG><a name="[1b6]"></a>ToEstimate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cwm_sensor_fusion.o(i.ToEstimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimatorInitToNorth
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionEstimator
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionMag
</UL>

<P><STRONG><a name="[176]"></a>fusionCheckCovariance</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cwm_sensor_fusion.o(i.fusionCheckCovariance))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fusionCheckCovariance
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictUpdate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[2c6]"></a>fusionMag</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, cwm_sensor_fusion.o(i.fusionMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = fusionMag &rArr; ToEstimate &rArr; QuaternionEstimator &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isArrayDuplicate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToEstimate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMagNorm
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion
</UL>

<P><STRONG><a name="[17d]"></a>gyro2Rotm</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, cwm_sensor_fusion.o(i.gyro2Rotm))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = gyro2Rotm &rArr; RodriguesRotation &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector2Skew
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictionUpdateCovP
</UL>

<P><STRONG><a name="[16e]"></a>makeDiagonalMatrix</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cwm_sensor_fusion.o(i.makeDiagonalMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = makeDiagonalMatrix
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat33Inverse
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RodriguesRotation
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictionUpdateCovP
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[170]"></a>mat33Inverse</STRONG> (Thumb, 232 bytes, Stack size 152 bytes, cwm_sensor_fusion.o(i.mat33Inverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mat33Inverse &rArr; makeDiagonalMatrix
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDiagonalMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[16c]"></a>vector2Skew</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cwm_sensor_fusion.o(i.vector2Skew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vector2Skew
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro2Rotm
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementUpdate
</UL>

<P><STRONG><a name="[191]"></a>clamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_fusion_utility.o(i.clamp))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToQuat
</UL>

<P><STRONG><a name="[14e]"></a>FindMedianIdx</STRONG> (Thumb, 498 bytes, Stack size 160 bytes, cwm_headset_orien.o(i.FindMedianIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FindMedianIdx &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_find_median
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
</UL>

<P><STRONG><a name="[150]"></a>GetStd</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cwm_headset_orien.o(i.GetStd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetStd &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
</UL>

<P><STRONG><a name="[da]"></a>Init_head_prediction</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, cwm_headset_orien.o(i.Init_head_prediction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Init_head_prediction
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_headset_orien
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_resetStableDetect
</UL>

<P><STRONG><a name="[18a]"></a>ResetYaw</STRONG> (Thumb, 216 bytes, Stack size 144 bytes, cwm_headset_orien.o(i.ResetYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ResetYaw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToRotMat
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotMatToOrien
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionConjugate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionProduct
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
</UL>

<P><STRONG><a name="[18d]"></a>RingBufferMovMean</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cwm_headset_orien.o(i.RingBufferMovMean))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RingBufferMovMean &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
</UL>

<P><STRONG><a name="[196]"></a>RingBufferPush</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cwm_headset_orien.o(i.RingBufferPush))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadPrediction
</UL>

<P><STRONG><a name="[d8]"></a>RunHeadCorrection</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, cwm_headset_orien.o(i.RunHeadCorrection))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RunHeadCorrection &rArr; ResetYaw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionGetQuat
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToOrien
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetYaw
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sensor_fusion_set_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_resetStableDetect
</UL>

<P><STRONG><a name="[195]"></a>RunHeadPrediction</STRONG> (Thumb, 758 bytes, Stack size 208 bytes, cwm_headset_orien.o(i.RunHeadPrediction))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RunHeadPrediction &rArr; RotAngleToQuat &rArr; cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_weightLinearFit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fusionGetQuat
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToFloat
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferPush
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferMovMean
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotAngleToQuat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionProduct
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
</UL>

<P><STRONG><a name="[1a7]"></a>Set_Orien_Output</STRONG> (Thumb, 422 bytes, Stack size 136 bytes, cwm_headset_orien.o(i.Set_Orien_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Set_Orien_Output &rArr; QuatToOrien &rArr; RotMatToOrien &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_transpose
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_sub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_multiply_scalar
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToFloat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToRotMat
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuatToOrien
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
</UL>

<P><STRONG><a name="[374]"></a>calRelation</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, cwm_headset_orien.o(i.calRelation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calRelation
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
</UL>

<P><STRONG><a name="[375]"></a>check_gyro</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, cwm_headset_orien.o(i.check_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGyrobufFull
</UL>

<P><STRONG><a name="[2ba]"></a>isGyrobufFull</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, cwm_headset_orien.o(i.isGyrobufFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = isGyrobufFull &rArr; FindMedianIdx &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gyro
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calRelation
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMedianIdx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
</UL>

<P><STRONG><a name="[d9]"></a>resetStableDetect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cwm_headset_orien.o(i.resetStableDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = resetStableDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_resetStableDetect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDeviceStable
</UL>

<P><STRONG><a name="[193]"></a>updateDeviceStable</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, cwm_headset_orien.o(i.updateDeviceStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = updateDeviceStable &rArr; resetStableDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fmin
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fmax
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStableDetect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_headset_orien
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHeadCorrection
</UL>

<P><STRONG><a name="[367]"></a>get_register_cache_addr</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, inv_imu_transport.o(i.get_register_cache_addr))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
</UL>

<P><STRONG><a name="[366]"></a>read_mclk_reg</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, inv_imu_transport.o(i.read_mclk_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = read_mclk_reg &rArr; inv_imu_switch_on_mclk &rArr;  inv_imu_read_reg (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sreg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sreg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init_transport
</UL>

<P><STRONG><a name="[365]"></a>read_sreg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, inv_imu_transport.o(i.read_sreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sreg
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_read_reg
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_init_transport
</UL>

<P><STRONG><a name="[368]"></a>write_mclk_reg</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, inv_imu_transport.o(i.write_mclk_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = write_mclk_reg &rArr;  inv_imu_switch_on_mclk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_sleep_us
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sreg
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_on_mclk
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_switch_off_mclk
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
</UL>

<P><STRONG><a name="[369]"></a>write_sreg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, inv_imu_transport.o(i.write_sreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sreg
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mclk_reg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mclk_reg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_imu_write_reg
</UL>

<P><STRONG><a name="[1ce]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ba]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[70]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
